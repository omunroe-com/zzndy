----------------------------------------------------------------
--This is a template for the database schema changes scripting--
--DO NOT MODIFY anything unless the opposite mentioned		  --
----------------------------------------------------------------

BEGIN TRANSACTION

BEGIN TRY
	DECLARE @updateAcceptedFlag int

	EXEC @updateAcceptedFlag = [dbo].[BEGIN_UPDATE]

	-- The 'XXX' must be replaced with the number (order) of the script
	--	It is the first three digits in the script name that contains this SQL
			@version = 104

	IF (@updateAcceptedFlag = 0)
	BEGIN
		-- Place your SQL below, preferably - inside the quotes---------
		-- REMEMBER: try to avoid DROPs/CREATEs, use ALTER instead;
		--			 always check preconditions on the schema object you're going to modify
		--			 remove all GO statements, they won't work and will cause errors
		EXECUTE dbo.sp_executesql @statement = N'
ALTER PROCEDURE [PROC_CLONE_FIELD] @FIE_ID DECIMAL (12,0), @NEW_FIE_ID DECIMAL (12,0) OUTPUT
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Create temporary tables (Just copy tables structure)
		--

		SELECT * INTO #FIELD_HEADER_FIELD
			FROM FIELD_HEADER WHERE 42=10;

		SELECT * INTO #TAX_NODE_FIELD
			FROM TAX_NODE WHERE 42=10;

		SELECT * INTO #INV_ASS_FIELD
			FROM INV_ASS WHERE 42=10;

		SELECT * INTO #FIELD_ADDITIONAL_FIELD
			FROM FIELD_ADDITIONAL WHERE 42=10;

		SELECT * INTO #FIELD_CONTRACTS_BLOCKS_FIELD
			FROM FIELD_CONTRACTS_BLOCKS WHERE 42=10;

		SELECT * INTO #FIELD_RESERVOIRS_FIELD
			FROM FIELD_RESERVOIRS WHERE 42=10;

		SELECT * INTO #FIELD_RESV_LITHOLOGIES_FIELD
			FROM FIELD_RESV_LITHOLOGIES WHERE 42=10;

		SELECT * INTO #PT_CON_CASH_FLOW_DATA_FIELD
			FROM PT_CON_CASH_FLOW_DATA WHERE 42=10;

		SELECT * INTO #PT_DETAIL_CASH_FLOW_GROUP_FIELD
			FROM PT_DETAIL_CASH_FLOW_GROUP WHERE 42=10;

		SELECT * INTO #PT_DETAIL_CASH_FLOW_TIMESERIES_FIELD
			FROM PT_DETAIL_CASH_FLOW_TIMESERIES WHERE 42=10;

		SELECT * INTO #PT_DETAIL_CASH_FLOW_DATA_FIELD
			FROM PT_DETAIL_CASH_FLOW_DATA WHERE 42=10;

		SELECT * INTO #PT_ECONOMIC_INDICATOR_FIELD
			FROM PT_ECONOMIC_INDICATOR WHERE 42=10;

		SELECT * INTO #PT_OTHER_INDICATOR_FIELD
			FROM PT_OTHER_INDICATOR WHERE 42=10;

		SELECT * INTO #INV_ASS_DATA_FIELD
			FROM INV_ASS_DATA WHERE 42=10;

		SELECT * INTO #INV_ASS_TUPLE_DATA_FIELD
			FROM INV_ASS_TUPLE_DATA WHERE 42=10;

		SELECT * INTO #FIELD_WELL_TABLE_FIELD
			FROM FIELD_WELL_TABLE WHERE 42=10;

		SELECT * INTO #PT_SUMMARY_GRAPH_FIELD
			FROM PT_SUMMARY_GRAPH WHERE 42=10;

		SELECT * INTO #FIELD_REPORT_FIELD
			FROM FIELD_REPORT WHERE 42=10;

		SELECT * INTO #FIELD_PHASE_DEVELOPMENT_FIELD
			FROM FIELD_PHASE_DEVELOPMENT WHERE 42=10;

		SELECT * INTO #PT_CASHFLOW_GRAPH_FIELD
			FROM PT_CASHFLOW_GRAPH WHERE 42=10;

		--
		-- Declare id variables
		--

		DECLARE @TAX_NODE_ID DECIMAL(12,0)

		DECLARE @INV_ASS_ORIGINAL_ID DECIMAL(12,0)

		DECLARE @INV_ASS_REDIST_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @TAX_NODE_ID = TAX_NODE_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_ORIGINAL_ID = INV_ASS_ORIGINAL_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_REDIST_ID = INV_ASS_REDIST_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		--
		-- ''Backup'' specified object to temporaties
		--

		INSERT INTO #FIELD_HEADER_FIELD
			SELECT * FROM FIELD_HEADER
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #TAX_NODE_FIELD
			SELECT * FROM TAX_NODE
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #INV_ASS_FIELD
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO #INV_ASS_FIELD
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO #FIELD_ADDITIONAL_FIELD
			SELECT * FROM FIELD_ADDITIONAL
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #FIELD_CONTRACTS_BLOCKS_FIELD
			SELECT * FROM FIELD_CONTRACTS_BLOCKS
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #FIELD_RESERVOIRS_FIELD
			SELECT * FROM FIELD_RESERVOIRS
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #FIELD_RESV_LITHOLOGIES_FIELD
			SELECT * FROM FIELD_RESV_LITHOLOGIES
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #PT_CON_CASH_FLOW_DATA_FIELD
			SELECT * FROM PT_CON_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_DETAIL_CASH_FLOW_GROUP_FIELD
			SELECT * FROM PT_DETAIL_CASH_FLOW_GROUP
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_DETAIL_CASH_FLOW_TIMESERIES_FIELD
			SELECT * FROM PT_DETAIL_CASH_FLOW_TIMESERIES
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_DETAIL_CASH_FLOW_DATA_FIELD
			SELECT * FROM PT_DETAIL_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_ECONOMIC_INDICATOR_FIELD
			SELECT * FROM PT_ECONOMIC_INDICATOR
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_OTHER_INDICATOR_FIELD
			SELECT * FROM PT_OTHER_INDICATOR
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #INV_ASS_DATA_FIELD
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO #INV_ASS_DATA_FIELD
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO #INV_ASS_TUPLE_DATA_FIELD
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO #INV_ASS_TUPLE_DATA_FIELD
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO #FIELD_WELL_TABLE_FIELD
			SELECT * FROM FIELD_WELL_TABLE
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #PT_SUMMARY_GRAPH_FIELD
			SELECT * FROM PT_SUMMARY_GRAPH
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #FIELD_REPORT_FIELD
			SELECT * FROM FIELD_REPORT
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #FIELD_PHASE_DEVELOPMENT_FIELD
			SELECT * FROM FIELD_PHASE_DEVELOPMENT
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #PT_CASHFLOW_GRAPH_FIELD
			SELECT * FROM PT_CASHFLOW_GRAPH
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #INV_ASS_TUPLE_DATA_FIELD
		SELECT INV_ASS_TUPLE_DATA.* FROM INV_ASS_TUPLE_DATA
			INNER JOIN FIELD_PHASE_DEVELOPMENT
				ON INV_ASS_TUPLE_DATA.INV_ASS_ID = FIELD_PHASE_DEVELOPMENT.INV_ASS
			WHERE FIELD_PHASE_DEVELOPMENT.FIE_ID = @FIE_ID;

		INSERT INTO #INV_ASS_FIELD
		SELECT INV_ASS.* FROM INV_ASS
			INNER JOIN FIELD_PHASE_DEVELOPMENT
				ON INV_ASS.INV_ASS_ID = FIELD_PHASE_DEVELOPMENT.INV_ASS
			WHERE FIELD_PHASE_DEVELOPMENT.FIE_ID = @FIE_ID;

		DECLARE @NAME VARCHAR(50)
		SELECT @NAME = ''Copy of '' + FIELD_NAME FROM #FIELD_HEADER_FIELD WHERE FIE_ID = @FIE_ID;

		DECLARE @N INT;
		SET @N = 2;

		WHILE EXISTS (SELECT FIELD_NAME FROM FIELD_HEADER WHERE FIELD_NAME = @NAME)
		BEGIN
			SELECT @NAME = ''Copy ('' + CONVERT(VARCHAR(2), @N) + '') of '' + FIELD_NAME
				FROM #FIELD_HEADER_FIELD WHERE FIE_ID = @FIE_ID;

			SET @N = @N + 1;
		END

		UPDATE #FIELD_HEADER_FIELD SET FIELD_NAME = @NAME WHERE FIE_ID = @FIE_ID;

		--
		-- Get new IDs
		--

		DECLARE @NEW_TAX_NODE_ID DECIMAL (12, 0);

		DECLARE @NEW_INV_ASS_ORIGINAL_ID DECIMAL (12, 0);

		DECLARE @NEW_INV_ASS_REDIST_ID DECIMAL (12, 0);

		EXEC sp_GenerateNumericIdentity @NEW_FIE_ID OUTPUT, ''FIELD_HEADER'', ''FIE_ID'';

		EXEC sp_GenerateNumericIdentity @NEW_TAX_NODE_ID OUTPUT, ''TAX_NODE'', ''TAX_NODE_ID'';

		EXEC sp_GenerateNumericIdentity @NEW_INV_ASS_ORIGINAL_ID OUTPUT, ''INV_ASS'', ''INV_ASS_ID'';

		EXEC sp_GenerateNumericIdentity @NEW_INV_ASS_REDIST_ID OUTPUT, ''INV_ASS'', ''INV_ASS_ID'';

		--
		-- Update IDs
		--

		UPDATE #FIELD_HEADER_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #TAX_NODE_FIELD SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #INV_ASS_FIELD SET INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		UPDATE #INV_ASS_FIELD SET INV_ASS_ID = @NEW_INV_ASS_REDIST_ID WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		UPDATE #FIELD_ADDITIONAL_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #FIELD_ADDITIONAL_FIELD SET INV_ASS_ORIGINAL_ID = @NEW_INV_ASS_ORIGINAL_ID WHERE INV_ASS_ORIGINAL_ID = @INV_ASS_ORIGINAL_ID;

		UPDATE #FIELD_ADDITIONAL_FIELD SET INV_ASS_REDIST_ID = @NEW_INV_ASS_REDIST_ID WHERE INV_ASS_REDIST_ID = @INV_ASS_REDIST_ID;

		UPDATE #FIELD_ADDITIONAL_FIELD SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #FIELD_CONTRACTS_BLOCKS_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #FIELD_RESERVOIRS_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #FIELD_RESV_LITHOLOGIES_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #PT_CON_CASH_FLOW_DATA_FIELD SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_DETAIL_CASH_FLOW_GROUP_FIELD SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_DETAIL_CASH_FLOW_TIMESERIES_FIELD SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_DETAIL_CASH_FLOW_DATA_FIELD SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_ECONOMIC_INDICATOR_FIELD SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_OTHER_INDICATOR_FIELD SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #INV_ASS_DATA_FIELD SET INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		UPDATE #INV_ASS_DATA_FIELD SET INV_ASS_ID = @NEW_INV_ASS_REDIST_ID WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		UPDATE #INV_ASS_TUPLE_DATA_FIELD SET INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		UPDATE #INV_ASS_TUPLE_DATA_FIELD SET INV_ASS_ID = @NEW_INV_ASS_REDIST_ID WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		UPDATE #FIELD_WELL_TABLE_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #PT_SUMMARY_GRAPH_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #FIELD_REPORT_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #FIELD_PHASE_DEVELOPMENT_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #PT_CASHFLOW_GRAPH_FIELD SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;


		--
		-- Update phase to IA links
		--

		DECLARE @NEW_PHASE_INV_ASS DECIMAL(12, 0);
		DECLARE @PHASE_INV_ASS DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PHASE_ID
			FROM #FIELD_PHASE_DEVELOPMENT_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		OPEN CURS;

		DECLARE @IA_PHASE_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @IA_PHASE_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PHASE_INV_ASS OUTPUT, ''INV_ASS'', ''INV_ASS_ID'';

			SELECT @PHASE_INV_ASS = INV_ASS FROM #FIELD_PHASE_DEVELOPMENT_FIELD
				WHERE PHASE_ID = @IA_PHASE_ID;

			UPDATE #FIELD_PHASE_DEVELOPMENT_FIELD
				SET INV_ASS = @NEW_PHASE_INV_ASS
				WHERE PHASE_ID = @IA_PHASE_ID;

			UPDATE #INV_ASS_FIELD
				SET INV_ASS_ID = @NEW_PHASE_INV_ASS
				WHERE INV_ASS_ID = @PHASE_INV_ASS;

			UPDATE #INV_ASS_TUPLE_DATA_FIELD
				SET INV_ASS_ID = @NEW_PHASE_INV_ASS
				WHERE INV_ASS_ID = @PHASE_INV_ASS;

			FETCH NEXT FROM CURS INTO @IA_PHASE_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		UPDATE #FIELD_ADDITIONAL_FIELD SET FIELD_COMPLEX_ID = NULL WHERE FIE_ID = @NEW_FIE_ID;

		UPDATE #FIELD_CONTRACTS_BLOCKS_FIELD SET RESERVE_PCT = 0 WHERE FIE_ID = @NEW_FIE_ID;

		DECLARE @NEW_RESV_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT RESV_ID
			FROM #FIELD_RESERVOIRS_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		OPEN CURS;

		DECLARE @RESV_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @RESV_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_RESV_ID OUTPUT, ''FIELD_RESERVOIRS'', ''RESV_ID'';

			UPDATE #FIELD_RESERVOIRS_FIELD
				SET RESV_ID = @NEW_RESV_ID
				WHERE RESV_ID = @RESV_ID;

			FETCH NEXT FROM CURS INTO @RESV_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_PT_DETAIL_CASH_FLOW_GROUP_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PT_DETAIL_CASH_FLOW_GROUP_ID
			FROM #PT_DETAIL_CASH_FLOW_GROUP_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		OPEN CURS;

		DECLARE @PT_DETAIL_CASH_FLOW_GROUP_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @PT_DETAIL_CASH_FLOW_GROUP_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PT_DETAIL_CASH_FLOW_GROUP_ID OUTPUT, ''PT_DETAIL_CASH_FLOW_GROUP'', ''PT_DETAIL_CASH_FLOW_GROUP_ID'';

			UPDATE #PT_DETAIL_CASH_FLOW_GROUP_FIELD
				SET PT_DETAIL_CASH_FLOW_GROUP_ID = @NEW_PT_DETAIL_CASH_FLOW_GROUP_ID
				WHERE PT_DETAIL_CASH_FLOW_GROUP_ID = @PT_DETAIL_CASH_FLOW_GROUP_ID;

			UPDATE #PT_DETAIL_CASH_FLOW_TIMESERIES_FIELD SET PT_DETAIL_CASH_FLOW_GROUP_ID = @NEW_PT_DETAIL_CASH_FLOW_GROUP_ID WHERE PT_DETAIL_CASH_FLOW_GROUP_ID = @PT_DETAIL_CASH_FLOW_GROUP_ID;

			FETCH NEXT FROM CURS INTO @PT_DETAIL_CASH_FLOW_GROUP_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_PT_DETAIL_CASH_FLOW_TIMESERIES_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PT_DETAIL_CASH_FLOW_TIMESERIES_ID
			FROM #PT_DETAIL_CASH_FLOW_TIMESERIES_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		OPEN CURS;

		DECLARE @PT_DETAIL_CASH_FLOW_TIMESERIES_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @PT_DETAIL_CASH_FLOW_TIMESERIES_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PT_DETAIL_CASH_FLOW_TIMESERIES_ID OUTPUT, ''PT_DETAIL_CASH_FLOW_TIMESERIES'', ''PT_DETAIL_CASH_FLOW_TIMESERIES_ID'';

			UPDATE #PT_DETAIL_CASH_FLOW_TIMESERIES_FIELD
				SET PT_DETAIL_CASH_FLOW_TIMESERIES_ID = @NEW_PT_DETAIL_CASH_FLOW_TIMESERIES_ID
				WHERE PT_DETAIL_CASH_FLOW_TIMESERIES_ID = @PT_DETAIL_CASH_FLOW_TIMESERIES_ID;

			UPDATE #PT_DETAIL_CASH_FLOW_DATA_FIELD SET PT_DETAIL_CASH_FLOW_TIMESERIES_ID = @NEW_PT_DETAIL_CASH_FLOW_TIMESERIES_ID WHERE PT_DETAIL_CASH_FLOW_TIMESERIES_ID = @PT_DETAIL_CASH_FLOW_TIMESERIES_ID;

			FETCH NEXT FROM CURS INTO @PT_DETAIL_CASH_FLOW_TIMESERIES_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_PT_ECONOMIC_INDICATOR_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PT_ECONOMIC_INDICATOR_ID
			FROM #PT_ECONOMIC_INDICATOR_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		OPEN CURS;

		DECLARE @PT_ECONOMIC_INDICATOR_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @PT_ECONOMIC_INDICATOR_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PT_ECONOMIC_INDICATOR_ID OUTPUT, ''PT_ECONOMIC_INDICATOR'', ''PT_ECONOMIC_INDICATOR_ID'';

			UPDATE #PT_ECONOMIC_INDICATOR_FIELD
				SET PT_ECONOMIC_INDICATOR_ID = @NEW_PT_ECONOMIC_INDICATOR_ID
				WHERE PT_ECONOMIC_INDICATOR_ID = @PT_ECONOMIC_INDICATOR_ID;

			FETCH NEXT FROM CURS INTO @PT_ECONOMIC_INDICATOR_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_PHASE_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PHASE_ID
			FROM #FIELD_PHASE_DEVELOPMENT_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		OPEN CURS;

		DECLARE @PHASE_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @PHASE_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PHASE_ID OUTPUT, ''FIELD_PHASE_DEVELOPMENT'', ''PHASE_ID'';

			UPDATE #FIELD_PHASE_DEVELOPMENT_FIELD
				SET PHASE_ID = @NEW_PHASE_ID
				WHERE PHASE_ID = @PHASE_ID;

			FETCH NEXT FROM CURS INTO @PHASE_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		--
		-- ''Restore'' copy
		--

		INSERT INTO INV_ASS
		SELECT #INV_ASS_FIELD.* FROM #INV_ASS_FIELD
			INNER JOIN #FIELD_PHASE_DEVELOPMENT_FIELD
				ON #INV_ASS_FIELD.INV_ASS_ID = #FIELD_PHASE_DEVELOPMENT_FIELD.INV_ASS
			WHERE #FIELD_PHASE_DEVELOPMENT_FIELD.FIE_ID = @NEW_FIE_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
		SELECT #INV_ASS_TUPLE_DATA_FIELD.* FROM #INV_ASS_TUPLE_DATA_FIELD
			INNER JOIN #FIELD_PHASE_DEVELOPMENT_FIELD
				ON #INV_ASS_TUPLE_DATA_FIELD.INV_ASS_ID = #FIELD_PHASE_DEVELOPMENT_FIELD.INV_ASS
			WHERE #FIELD_PHASE_DEVELOPMENT_FIELD.FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_HEADER
			SELECT * FROM #FIELD_HEADER_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO TAX_NODE
			SELECT * FROM #TAX_NODE_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO INV_ASS
			SELECT * FROM #INV_ASS_FIELD
			WHERE INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS
			SELECT * FROM #INV_ASS_FIELD
			WHERE INV_ASS_ID = @NEW_INV_ASS_REDIST_ID;

		INSERT INTO FIELD_ADDITIONAL
			SELECT * FROM #FIELD_ADDITIONAL_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_CONTRACTS_BLOCKS
			SELECT * FROM #FIELD_CONTRACTS_BLOCKS_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_RESERVOIRS
			SELECT * FROM #FIELD_RESERVOIRS_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_RESV_LITHOLOGIES
			SELECT * FROM #FIELD_RESV_LITHOLOGIES_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO PT_CON_CASH_FLOW_DATA
			SELECT * FROM #PT_CON_CASH_FLOW_DATA_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_GROUP
			SELECT * FROM #PT_DETAIL_CASH_FLOW_GROUP_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_TIMESERIES
			SELECT * FROM #PT_DETAIL_CASH_FLOW_TIMESERIES_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_DATA
			SELECT * FROM #PT_DETAIL_CASH_FLOW_DATA_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_ECONOMIC_INDICATOR
			SELECT * FROM #PT_ECONOMIC_INDICATOR_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_OTHER_INDICATOR
			SELECT * FROM #PT_OTHER_INDICATOR_FIELD
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO INV_ASS_DATA
			SELECT * FROM #INV_ASS_DATA_FIELD
			WHERE INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_DATA
			SELECT * FROM #INV_ASS_DATA_FIELD
			WHERE INV_ASS_ID = @NEW_INV_ASS_REDIST_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM #INV_ASS_TUPLE_DATA_FIELD
			WHERE INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM #INV_ASS_TUPLE_DATA_FIELD
			WHERE INV_ASS_ID = @NEW_INV_ASS_REDIST_ID;

		INSERT INTO FIELD_WELL_TABLE
			SELECT * FROM #FIELD_WELL_TABLE_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO PT_SUMMARY_GRAPH
			SELECT * FROM #PT_SUMMARY_GRAPH_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_REPORT
			SELECT * FROM #FIELD_REPORT_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_PHASE_DEVELOPMENT
			SELECT * FROM #FIELD_PHASE_DEVELOPMENT_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO PT_CASHFLOW_GRAPH
			SELECT * FROM #PT_CASHFLOW_GRAPH_FIELD
			WHERE FIE_ID = @NEW_FIE_ID;

		--
		-- Drop temporaries
		--

		DROP TABLE #FIELD_HEADER_FIELD;

		DROP TABLE #TAX_NODE_FIELD;

		DROP TABLE #INV_ASS_FIELD;

		DROP TABLE #FIELD_ADDITIONAL_FIELD;

		DROP TABLE #FIELD_CONTRACTS_BLOCKS_FIELD;

		DROP TABLE #FIELD_RESERVOIRS_FIELD;

		DROP TABLE #FIELD_RESV_LITHOLOGIES_FIELD;

		DROP TABLE #PT_CON_CASH_FLOW_DATA_FIELD;

		DROP TABLE #PT_DETAIL_CASH_FLOW_GROUP_FIELD;

		DROP TABLE #PT_DETAIL_CASH_FLOW_TIMESERIES_FIELD;

		DROP TABLE #PT_DETAIL_CASH_FLOW_DATA_FIELD;

		DROP TABLE #PT_ECONOMIC_INDICATOR_FIELD;

		DROP TABLE #PT_OTHER_INDICATOR_FIELD;

		DROP TABLE #INV_ASS_DATA_FIELD;

		DROP TABLE #INV_ASS_TUPLE_DATA_FIELD;

		DROP TABLE #FIELD_WELL_TABLE_FIELD;

		DROP TABLE #PT_SUMMARY_GRAPH_FIELD;

		DROP TABLE #FIELD_REPORT_FIELD;

		DROP TABLE #FIELD_PHASE_DEVELOPMENT_FIELD;

		DROP TABLE #PT_CASHFLOW_GRAPH_FIELD;

		--
		-- Update tag
		--

		UPDATE FIELD_ADDITIONAL SET CREATED_BY=''USER'' WHERE FIE_ID = @NEW_FIE_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR(''%s failed: %s'', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
		'
		----------------------------------------------------------------
	END
END TRY
BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000)
	DECLARE @ErrorSeverity INT
	DECLARE @ErrorState INT

	SELECT
		@ErrorMessage = ERROR_MESSAGE(),
		@ErrorSeverity = ERROR_SEVERITY(),
		@ErrorState = ERROR_STATE()

	IF (@@TRANCOUNT > 0)
		ROLLBACK TRANSACTION

	RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)
END CATCH

IF (@@TRANCOUNT > 0)
	COMMIT TRANSACTION