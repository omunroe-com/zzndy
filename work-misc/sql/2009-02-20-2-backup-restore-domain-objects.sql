IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_BACKUP_FIELD')
	DROP PROCEDURE [PROC_BACKUP_FIELD]
GO
CREATE PROCEDURE [PROC_BACKUP_FIELD] @FIE_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID) != 'IHS'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		DECLARE @TAX_NODE_ID DECIMAL(12,0)

		DECLARE @INV_ASS_ORIGINAL_ID DECIMAL(12,0)

		DECLARE @INV_ASS_REDIST_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @TAX_NODE_ID = TAX_NODE_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_ORIGINAL_ID = INV_ASS_ORIGINAL_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_REDIST_ID = INV_ASS_REDIST_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		--
		-- Delete old backup
		--

		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW
			WHERE INV_ASS_TUPLE_DATA_SHADOW.INV_ASS_ID IN
			(
				SELECT INV_ASS
					FROM FIELD_PHASE_DEVELOPMENT_SHADOW
					WHERE FIE_ID = @FIE_ID
			);

		DELETE FROM INV_ASS_SHADOW
			WHERE INV_ASS_SHADOW.INV_ASS_ID IN
			(
				SELECT INV_ASS
					FROM FIELD_PHASE_DEVELOPMENT_SHADOW
					WHERE FIE_ID = @FIE_ID
			);

		DELETE FROM PT_CASHFLOW_GRAPH_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_PHASE_DEVELOPMENT_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_REPORT_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM PT_SUMMARY_GRAPH_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_WELL_TABLE_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM PT_OTHER_INDICATOR_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_ECONOMIC_INDICATOR_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_DATA_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_GROUP_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_CON_CASH_FLOW_DATA_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM FIELD_RESV_LITHOLOGIES_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_RESERVOIRS_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_CONTRACTS_BLOCKS_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_ADDITIONAL_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM TAX_NODE_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM FIELD_HEADER_SHADOW WHERE
			FIE_ID = @FIE_ID;

		--
		-- Backup data
		--

		INSERT INTO FIELD_HEADER_SHADOW
			SELECT * FROM FIELD_HEADER
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO TAX_NODE_SHADOW
			SELECT * FROM TAX_NODE
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO INV_ASS_SHADOW
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_SHADOW
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO FIELD_ADDITIONAL_SHADOW
			SELECT * FROM FIELD_ADDITIONAL
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_CONTRACTS_BLOCKS_SHADOW
			SELECT * FROM FIELD_CONTRACTS_BLOCKS
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_RESERVOIRS_SHADOW
			SELECT * FROM FIELD_RESERVOIRS
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_RESV_LITHOLOGIES_SHADOW
			SELECT * FROM FIELD_RESV_LITHOLOGIES
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO PT_CON_CASH_FLOW_DATA_SHADOW
			SELECT * FROM PT_CON_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_GROUP_SHADOW
			SELECT * FROM PT_DETAIL_CASH_FLOW_GROUP
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW
			SELECT * FROM PT_DETAIL_CASH_FLOW_TIMESERIES
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_DATA_SHADOW
			SELECT * FROM PT_DETAIL_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_ECONOMIC_INDICATOR_SHADOW
			SELECT * FROM PT_ECONOMIC_INDICATOR
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_OTHER_INDICATOR_SHADOW
			SELECT * FROM PT_OTHER_INDICATOR
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO INV_ASS_DATA_SHADOW
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_DATA_SHADOW
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO INV_ASS_TUPLE_DATA_SHADOW
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_TUPLE_DATA_SHADOW
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO FIELD_WELL_TABLE_SHADOW
			SELECT * FROM FIELD_WELL_TABLE
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO PT_SUMMARY_GRAPH_SHADOW
			SELECT * FROM PT_SUMMARY_GRAPH
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_REPORT_SHADOW
			SELECT * FROM FIELD_REPORT
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_PHASE_DEVELOPMENT_SHADOW
			SELECT * FROM FIELD_PHASE_DEVELOPMENT
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO PT_CASHFLOW_GRAPH_SHADOW
			SELECT * FROM PT_CASHFLOW_GRAPH
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO INV_ASS_SHADOW
		SELECT INV_ASS.* FROM INV_ASS
			INNER JOIN FIELD_PHASE_DEVELOPMENT
				ON INV_ASS.INV_ASS_ID = FIELD_PHASE_DEVELOPMENT.INV_ASS
			WHERE FIELD_PHASE_DEVELOPMENT.FIE_ID = @FIE_ID;

		INSERT INTO INV_ASS_TUPLE_DATA_SHADOW
		SELECT INV_ASS_TUPLE_DATA.* FROM INV_ASS_TUPLE_DATA
			INNER JOIN FIELD_PHASE_DEVELOPMENT
				ON INV_ASS_TUPLE_DATA.INV_ASS_ID = FIELD_PHASE_DEVELOPMENT.INV_ASS
			WHERE FIELD_PHASE_DEVELOPMENT.FIE_ID = @FIE_ID;

		--
		-- Update tag
		--

		UPDATE FIELD_ADDITIONAL SET MODIFIED_BY='USER' WHERE FIE_ID = @FIE_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO

GRANT EXEC ON [PROC_BACKUP_FIELD] TO [abu]
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_HEADER_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_HEADER';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='TAX_NODE_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'TAX_NODE';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='INV_ASS_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'INV_ASS';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_ADDITIONAL_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_ADDITIONAL';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_CONTRACTS_BLOCKS_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_CONTRACTS_BLOCKS';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_RESERVOIRS_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_RESERVOIRS';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_RESV_LITHOLOGIES_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_RESV_LITHOLOGIES';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='PT_CON_CASH_FLOW_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'PT_CON_CASH_FLOW_DATA';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='PT_DETAIL_CASH_FLOW_GROUP_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'PT_DETAIL_CASH_FLOW_GROUP';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'PT_DETAIL_CASH_FLOW_TIMESERIES';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='PT_DETAIL_CASH_FLOW_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'PT_DETAIL_CASH_FLOW_DATA';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='PT_ECONOMIC_INDICATOR_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'PT_ECONOMIC_INDICATOR';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='PT_OTHER_INDICATOR_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'PT_OTHER_INDICATOR';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='INV_ASS_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'INV_ASS_DATA';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='INV_ASS_TUPLE_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'INV_ASS_TUPLE_DATA';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_WELL_TABLE_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_WELL_TABLE';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='PT_SUMMARY_GRAPH_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'PT_SUMMARY_GRAPH';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_REPORT_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_REPORT';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_PHASE_DEVELOPMENT_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_PHASE_DEVELOPMENT';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='PT_CASHFLOW_GRAPH_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'PT_CASHFLOW_GRAPH';
GO



IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_RESTORE_FIELD')
	DROP PROCEDURE [PROC_RESTORE_FIELD]
GO
CREATE PROCEDURE [PROC_RESTORE_FIELD] @FIE_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID) != 'USER'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		DECLARE @TAX_NODE_ID DECIMAL(12,0)

		DECLARE @INV_ASS_ORIGINAL_ID DECIMAL(12,0)

		DECLARE @INV_ASS_REDIST_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @TAX_NODE_ID = TAX_NODE_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_ORIGINAL_ID = INV_ASS_ORIGINAL_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_REDIST_ID = INV_ASS_REDIST_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		--
		-- Save IA dependant on this phase
		--

		SELECT INV_ASS.INV_ASS_ID, FIELD_PHASE_DEVELOPMENT.PHASE_ID
			INTO #TEMP_INV_ASS_IDS
			FROM INV_ASS
			INNER JOIN FIELD_PHASE_DEVELOPMENT
				ON FIELD_PHASE_DEVELOPMENT.INV_ASS = INV_ASS.INV_ASS_ID
			WHERE FIELD_PHASE_DEVELOPMENT.FIE_ID = @FIE_ID;

		--
		-- Destroy Field-Phase-IA link
		--

		UPDATE FIELD_PHASE_DEVELOPMENT
			SET INV_ASS = NULL
			WHERE FIE_ID = @FIE_ID;

		--
		-- Delete user version
		--

		DELETE FROM PT_CASHFLOW_GRAPH WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_PHASE_DEVELOPMENT WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_TUPLE_DATA.INV_ASS_ID IN
			(
				SELECT INV_ASS_ID
					FROM #TEMP_INV_ASS_IDS
			);

		DELETE FROM INV_ASS
			WHERE INV_ASS.INV_ASS_ID IN
			(
				SELECT INV_ASS_ID
					FROM #TEMP_INV_ASS_IDS
			);

		DELETE FROM FIELD_REPORT WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM PT_SUMMARY_GRAPH WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_WELL_TABLE WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM INV_ASS_TUPLE_DATA WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS_TUPLE_DATA WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM INV_ASS_DATA WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS_DATA WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM PT_OTHER_INDICATOR WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_ECONOMIC_INDICATOR WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_DATA WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_TIMESERIES WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_GROUP WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_CON_CASH_FLOW_DATA WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM FIELD_RESV_LITHOLOGIES WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_RESERVOIRS WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_CONTRACTS_BLOCKS WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_ADDITIONAL WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM INV_ASS WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM TAX_NODE WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM FIELD_HEADER WHERE
			FIE_ID = @FIE_ID;

		--
		-- Set id variables acording to backed copy
		--

		SELECT @TAX_NODE_ID = TAX_NODE_ID FROM FIELD_ADDITIONAL_SHADOW WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_ORIGINAL_ID = INV_ASS_ORIGINAL_ID FROM FIELD_ADDITIONAL_SHADOW WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_REDIST_ID = INV_ASS_REDIST_ID FROM FIELD_ADDITIONAL_SHADOW WHERE FIE_ID = @FIE_ID;

		--
		-- Restore data
		--

		INSERT INTO INV_ASS
		SELECT INV_ASS_SHADOW.* FROM INV_ASS_SHADOW
			INNER JOIN FIELD_PHASE_DEVELOPMENT_SHADOW
				ON INV_ASS_SHADOW.INV_ASS_ID = FIELD_PHASE_DEVELOPMENT_SHADOW.INV_ASS
			WHERE FIELD_PHASE_DEVELOPMENT_SHADOW.FIE_ID = @FIE_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
		SELECT INV_ASS_TUPLE_DATA_SHADOW.* FROM INV_ASS_TUPLE_DATA_SHADOW
			INNER JOIN FIELD_PHASE_DEVELOPMENT_SHADOW
				ON INV_ASS_TUPLE_DATA_SHADOW.INV_ASS_ID = FIELD_PHASE_DEVELOPMENT_SHADOW.INV_ASS
			WHERE FIELD_PHASE_DEVELOPMENT_SHADOW.FIE_ID = @FIE_ID;

		INSERT INTO FIELD_HEADER
			SELECT * FROM FIELD_HEADER_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO TAX_NODE
			SELECT * FROM TAX_NODE_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO INV_ASS
			SELECT * FROM INV_ASS_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS
			SELECT * FROM INV_ASS_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO FIELD_ADDITIONAL
			SELECT * FROM FIELD_ADDITIONAL_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_CONTRACTS_BLOCKS
			SELECT * FROM FIELD_CONTRACTS_BLOCKS_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_RESERVOIRS
			SELECT * FROM FIELD_RESERVOIRS_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_RESV_LITHOLOGIES
			SELECT * FROM FIELD_RESV_LITHOLOGIES_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO PT_CON_CASH_FLOW_DATA
			SELECT * FROM PT_CON_CASH_FLOW_DATA_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_GROUP
			SELECT * FROM PT_DETAIL_CASH_FLOW_GROUP_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_TIMESERIES
			SELECT * FROM PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_DATA
			SELECT * FROM PT_DETAIL_CASH_FLOW_DATA_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_ECONOMIC_INDICATOR
			SELECT * FROM PT_ECONOMIC_INDICATOR_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO PT_OTHER_INDICATOR
			SELECT * FROM PT_OTHER_INDICATOR_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO FIELD_WELL_TABLE
			SELECT * FROM FIELD_WELL_TABLE_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO PT_SUMMARY_GRAPH
			SELECT * FROM PT_SUMMARY_GRAPH_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_REPORT
			SELECT * FROM FIELD_REPORT_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO FIELD_PHASE_DEVELOPMENT
			SELECT * FROM FIELD_PHASE_DEVELOPMENT_SHADOW
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO PT_CASHFLOW_GRAPH
			SELECT * FROM PT_CASHFLOW_GRAPH_SHADOW
			WHERE FIE_ID = @FIE_ID;

		--
		-- Restore Field-Phase-IA link
		--

		UPDATE FIELD_PHASE_DEVELOPMENT
			SET FIELD_PHASE_DEVELOPMENT.INV_ASS = #TEMP_INV_ASS_IDS.INV_ASS_ID
			FROM FIELD_PHASE_DEVELOPMENT
			INNER JOIN #TEMP_INV_ASS_IDS
				ON FIELD_PHASE_DEVELOPMENT.PHASE_ID = #TEMP_INV_ASS_IDS.PHASE_ID;

		DROP TABLE #TEMP_INV_ASS_IDS;

		--
		-- Delete backup
		--

		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW
			WHERE INV_ASS_TUPLE_DATA_SHADOW.INV_ASS_ID IN
			(
				SELECT INV_ASS
					FROM FIELD_PHASE_DEVELOPMENT_SHADOW
					WHERE FIE_ID = @FIE_ID
			);

		DELETE FROM INV_ASS_SHADOW
			WHERE INV_ASS_SHADOW.INV_ASS_ID IN
			(
				SELECT INV_ASS
					FROM FIELD_PHASE_DEVELOPMENT_SHADOW
					WHERE FIE_ID = @FIE_ID
			);

		DELETE FROM PT_CASHFLOW_GRAPH_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_PHASE_DEVELOPMENT_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_REPORT_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM PT_SUMMARY_GRAPH_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_WELL_TABLE_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM PT_OTHER_INDICATOR_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_ECONOMIC_INDICATOR_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_DATA_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_DETAIL_CASH_FLOW_GROUP_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM PT_CON_CASH_FLOW_DATA_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM FIELD_RESV_LITHOLOGIES_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_RESERVOIRS_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_CONTRACTS_BLOCKS_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM FIELD_ADDITIONAL_SHADOW WHERE
			FIE_ID = @FIE_ID;

		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;

		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		DELETE FROM TAX_NODE_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;

		DELETE FROM FIELD_HEADER_SHADOW WHERE
			FIE_ID = @FIE_ID;

		--
		-- Update tag
		--

		UPDATE FIELD_ADDITIONAL SET MODIFIED_BY='IHS' WHERE FIE_ID = @FIE_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO



GRANT EXEC ON [PROC_RESTORE_FIELD] TO [abu]
GO

IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_BACKUP_BLOCK')
	DROP PROCEDURE [PROC_BACKUP_BLOCK]
GO
CREATE PROCEDURE [PROC_BACKUP_BLOCK] @GA_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM BLOCK_ADDITIONAL WHERE GA_ID = @GA_ID) != 'IHS'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		DECLARE @PAR_ID DECIMAL(12,0)

		DECLARE @EPC_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @PAR_ID = PAR_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;

		SELECT @EPC_ID = EPC_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;

		--
		-- Delete old backup
		--

		DELETE FROM FIELD_CONTRACTS_BLOCKS_SHADOW WHERE
			GA_ID = @GA_ID;

		DELETE FROM BLOCK_ADDITIONAL_SHADOW WHERE
			GA_ID = @GA_ID;

		DELETE FROM CONTRACT_ADDITIONAL_SHADOW WHERE
			EPC_ID = @EPC_ID;

		DELETE FROM BLOCK_HEADER_SHADOW WHERE
			GA_ID = @GA_ID;

		DELETE FROM CONTRACT_HEADER_SHADOW WHERE
			EPC_ID = @EPC_ID;

		DELETE FROM GROUP_PARTNER_INTERESTS_SHADOW WHERE
			PAR_ID = @PAR_ID;

		--
		-- Backup data
		--

		INSERT INTO GROUP_PARTNER_INTERESTS_SHADOW
			SELECT * FROM GROUP_PARTNER_INTERESTS
			WHERE PAR_ID = @PAR_ID;

		INSERT INTO CONTRACT_HEADER_SHADOW
			SELECT * FROM CONTRACT_HEADER
			WHERE EPC_ID = @EPC_ID;

		INSERT INTO BLOCK_HEADER_SHADOW
			SELECT * FROM BLOCK_HEADER
			WHERE GA_ID = @GA_ID;

		INSERT INTO CONTRACT_ADDITIONAL_SHADOW
			SELECT * FROM CONTRACT_ADDITIONAL
			WHERE EPC_ID = @EPC_ID;

		INSERT INTO BLOCK_ADDITIONAL_SHADOW
			SELECT * FROM BLOCK_ADDITIONAL
			WHERE GA_ID = @GA_ID;

		INSERT INTO FIELD_CONTRACTS_BLOCKS_SHADOW
			SELECT * FROM FIELD_CONTRACTS_BLOCKS
			WHERE GA_ID = @GA_ID;

		--
		-- Update tag
		--

		UPDATE BLOCK_ADDITIONAL SET MODIFIED_BY='USER' WHERE GA_ID = @GA_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO

GRANT EXEC ON [PROC_BACKUP_BLOCK] TO [abu]
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='GROUP_PARTNER_INTERESTS_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'GROUP_PARTNER_INTERESTS';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='CONTRACT_HEADER_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'CONTRACT_HEADER';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='BLOCK_HEADER_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'BLOCK_HEADER';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='CONTRACT_ADDITIONAL_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'CONTRACT_ADDITIONAL';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='BLOCK_ADDITIONAL_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'BLOCK_ADDITIONAL';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_CONTRACTS_BLOCKS_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_CONTRACTS_BLOCKS';
GO



IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_RESTORE_BLOCK')
	DROP PROCEDURE [PROC_RESTORE_BLOCK]
GO
CREATE PROCEDURE [PROC_RESTORE_BLOCK] @GA_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM BLOCK_ADDITIONAL WHERE GA_ID = @GA_ID) != 'USER'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		DECLARE @PAR_ID DECIMAL(12,0)

		DECLARE @EPC_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @PAR_ID = PAR_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;

		SELECT @EPC_ID = EPC_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;

		--
		-- Delete user version
		--

		DELETE FROM FIELD_CONTRACTS_BLOCKS WHERE
			GA_ID = @GA_ID;

		DELETE FROM BLOCK_ADDITIONAL WHERE
			GA_ID = @GA_ID;

		DELETE FROM CONTRACT_ADDITIONAL WHERE
			EPC_ID = @EPC_ID;

		DELETE FROM BLOCK_HEADER WHERE
			GA_ID = @GA_ID;

		DELETE FROM CONTRACT_HEADER WHERE
			EPC_ID = @EPC_ID;

		DELETE FROM GROUP_PARTNER_INTERESTS WHERE
			PAR_ID = @PAR_ID;

		--
		-- Set id variables acording to backed copy
		--

		SELECT @PAR_ID = PAR_ID FROM BLOCK_HEADER_SHADOW WHERE GA_ID = @GA_ID;

		SELECT @EPC_ID = EPC_ID FROM BLOCK_HEADER_SHADOW WHERE GA_ID = @GA_ID;

		--
		-- Restore data
		--

		INSERT INTO GROUP_PARTNER_INTERESTS
			SELECT * FROM GROUP_PARTNER_INTERESTS_SHADOW
			WHERE PAR_ID = @PAR_ID;

		INSERT INTO CONTRACT_HEADER
			SELECT * FROM CONTRACT_HEADER_SHADOW
			WHERE EPC_ID = @EPC_ID;

		INSERT INTO BLOCK_HEADER
			SELECT * FROM BLOCK_HEADER_SHADOW
			WHERE GA_ID = @GA_ID;

		INSERT INTO CONTRACT_ADDITIONAL
			SELECT * FROM CONTRACT_ADDITIONAL_SHADOW
			WHERE EPC_ID = @EPC_ID;

		INSERT INTO BLOCK_ADDITIONAL
			SELECT * FROM BLOCK_ADDITIONAL_SHADOW
			WHERE GA_ID = @GA_ID;

		INSERT INTO FIELD_CONTRACTS_BLOCKS
			SELECT * FROM FIELD_CONTRACTS_BLOCKS_SHADOW
			WHERE GA_ID = @GA_ID;

		--
		-- Delete backup
		--

		DELETE FROM FIELD_CONTRACTS_BLOCKS_SHADOW WHERE
			GA_ID = @GA_ID;

		DELETE FROM BLOCK_ADDITIONAL_SHADOW WHERE
			GA_ID = @GA_ID;

		DELETE FROM CONTRACT_ADDITIONAL_SHADOW WHERE
			EPC_ID = @EPC_ID;

		DELETE FROM BLOCK_HEADER_SHADOW WHERE
			GA_ID = @GA_ID;

		DELETE FROM CONTRACT_HEADER_SHADOW WHERE
			EPC_ID = @EPC_ID;

		DELETE FROM GROUP_PARTNER_INTERESTS_SHADOW WHERE
			PAR_ID = @PAR_ID;

		--
		-- Update tag
		--

		UPDATE BLOCK_ADDITIONAL SET MODIFIED_BY='IHS' WHERE GA_ID = @GA_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO



GRANT EXEC ON [PROC_RESTORE_BLOCK] TO [abu]
GO

IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_BACKUP_COMPLEX')
	DROP PROCEDURE [PROC_BACKUP_COMPLEX]
GO
CREATE PROCEDURE [PROC_BACKUP_COMPLEX] @FIELD_COMPLEX_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID) != 'IHS'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		DECLARE @INV_ASS_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @INV_ASS_ID = INV_ASS_ID FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		--
		-- Delete old backup
		--

		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;

		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;

		DELETE FROM FIELD_COMPLEX_SHADOW WHERE
			FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;

		--
		-- Backup data
		--

		INSERT INTO INV_ASS_SHADOW
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_ID;

		INSERT INTO FIELD_COMPLEX_SHADOW
			SELECT * FROM FIELD_COMPLEX
			WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		INSERT INTO INV_ASS_DATA_SHADOW
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_ID;

		INSERT INTO INV_ASS_TUPLE_DATA_SHADOW
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_ID;

		--
		-- Update tag
		--

		UPDATE FIELD_COMPLEX SET MODIFIED_BY='USER' WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO

GRANT EXEC ON [PROC_BACKUP_COMPLEX] TO [abu]
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='INV_ASS_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'INV_ASS';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='FIELD_COMPLEX_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'FIELD_COMPLEX';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='INV_ASS_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'INV_ASS_DATA';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='INV_ASS_TUPLE_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'INV_ASS_TUPLE_DATA';
GO



IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_RESTORE_COMPLEX')
	DROP PROCEDURE [PROC_RESTORE_COMPLEX]
GO
CREATE PROCEDURE [PROC_RESTORE_COMPLEX] @FIELD_COMPLEX_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID) != 'USER'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		DECLARE @INV_ASS_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @INV_ASS_ID = INV_ASS_ID FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		--
		-- Save link
		--

		SELECT FIE_ID INTO #TEMP_FIELD_ADDITIONAL_FIE_IDS
			FROM FIELD_ADDITIONAL
			WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		--
		-- Break link
		--

		UPDATE FIELD_ADDITIONAL
			SET FIELD_COMPLEX_ID = NULL
			WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		--
		-- Delete user version
		--

		DELETE FROM INV_ASS_TUPLE_DATA WHERE
			INV_ASS_ID = @INV_ASS_ID;

		DELETE FROM INV_ASS_DATA WHERE
			INV_ASS_ID = @INV_ASS_ID;

		DELETE FROM FIELD_COMPLEX WHERE
			FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		DELETE FROM INV_ASS WHERE
			INV_ASS_ID = @INV_ASS_ID;

		--
		-- Set id variables acording to backed copy
		--

		SELECT @INV_ASS_ID = INV_ASS_ID FROM FIELD_COMPLEX_SHADOW WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		--
		-- Restore data
		--

		INSERT INTO INV_ASS
			SELECT * FROM INV_ASS_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ID;

		INSERT INTO FIELD_COMPLEX
			SELECT * FROM FIELD_COMPLEX_SHADOW
			WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		INSERT INTO INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ID;

		--
		-- Restore link
		--

		UPDATE FIELD_ADDITIONAL
			SET FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID
			FROM FIELD_ADDITIONAL
			INNER JOIN #TEMP_FIELD_ADDITIONAL_FIE_IDS
			ON #TEMP_FIELD_ADDITIONAL_FIE_IDS.FIE_ID = FIELD_ADDITIONAL.FIE_ID;

		DROP TABLE #TEMP_FIELD_ADDITIONAL_FIE_IDS;

		--
		-- Delete backup
		--

		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;

		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;

		DELETE FROM FIELD_COMPLEX_SHADOW WHERE
			FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;

		--
		-- Update tag
		--

		UPDATE FIELD_COMPLEX SET MODIFIED_BY='IHS' WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO



GRANT EXEC ON [PROC_RESTORE_COMPLEX] TO [abu]
GO

IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_BACKUP_GLOBALS')
	DROP PROCEDURE [PROC_BACKUP_GLOBALS]
GO
CREATE PROCEDURE [PROC_BACKUP_GLOBALS] @GLOBAL_ASSUMPTIONS_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM GLOBAL_ASSUMPTIONS WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID) != 'IHS'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		--
		-- Set id variables
		--



		--
		-- Delete old backup
		--

		DELETE FROM LIQUID_PRICE_DATA_SHADOW WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM INFLATION_DATA_SHADOW WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GAS_PRICE_DATA_SHADOW WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM LIQUID_PRICE_SHADOW WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM INFLATION_SHADOW WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GAS_PRICE_SHADOW WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GLOBAL_ASSUMPTIONS_SHADOW WHERE
			GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		--
		-- Backup data
		--

		INSERT INTO GLOBAL_ASSUMPTIONS_SHADOW
			SELECT * FROM GLOBAL_ASSUMPTIONS
			WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		INSERT INTO GAS_PRICE_SHADOW
			SELECT * FROM GAS_PRICE
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO INFLATION_SHADOW
			SELECT * FROM INFLATION
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO LIQUID_PRICE_SHADOW
			SELECT * FROM LIQUID_PRICE
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO GAS_PRICE_DATA_SHADOW
			SELECT * FROM GAS_PRICE_DATA
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO INFLATION_DATA_SHADOW
			SELECT * FROM INFLATION_DATA
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO LIQUID_PRICE_DATA_SHADOW
			SELECT * FROM LIQUID_PRICE_DATA
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		--
		-- Update tag
		--

		UPDATE GLOBAL_ASSUMPTIONS SET MODIFIED_BY='USER' WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO

GRANT EXEC ON [PROC_BACKUP_GLOBALS] TO [abu]
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='GLOBAL_ASSUMPTIONS_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'GLOBAL_ASSUMPTIONS';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='GAS_PRICE_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'GAS_PRICE';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='INFLATION_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'INFLATION';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='LIQUID_PRICE_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'LIQUID_PRICE';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='GAS_PRICE_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'GAS_PRICE_DATA';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='INFLATION_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'INFLATION_DATA';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='LIQUID_PRICE_DATA_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'LIQUID_PRICE_DATA';
GO



IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_RESTORE_GLOBALS')
	DROP PROCEDURE [PROC_RESTORE_GLOBALS]
GO
CREATE PROCEDURE [PROC_RESTORE_GLOBALS] @GLOBAL_ASSUMPTIONS_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM GLOBAL_ASSUMPTIONS WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID) != 'USER'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		--
		-- Set id variables
		--



		--
		-- Delete user version
		--

		DELETE FROM LIQUID_PRICE_DATA WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM INFLATION_DATA WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GAS_PRICE_DATA WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM LIQUID_PRICE WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM INFLATION WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GAS_PRICE WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GLOBAL_ASSUMPTIONS WHERE
			GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		--
		-- Set id variables acording to backed copy
		--



		--
		-- Restore data
		--

		INSERT INTO GLOBAL_ASSUMPTIONS
			SELECT * FROM GLOBAL_ASSUMPTIONS_SHADOW
			WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		INSERT INTO GAS_PRICE
			SELECT * FROM GAS_PRICE_SHADOW
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO INFLATION
			SELECT * FROM INFLATION_SHADOW
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO LIQUID_PRICE
			SELECT * FROM LIQUID_PRICE_SHADOW
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO GAS_PRICE_DATA
			SELECT * FROM GAS_PRICE_DATA_SHADOW
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO INFLATION_DATA
			SELECT * FROM INFLATION_DATA_SHADOW
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO LIQUID_PRICE_DATA
			SELECT * FROM LIQUID_PRICE_DATA_SHADOW
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		--
		-- Delete backup
		--

		DELETE FROM LIQUID_PRICE_DATA_SHADOW WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM INFLATION_DATA_SHADOW WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GAS_PRICE_DATA_SHADOW WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM LIQUID_PRICE_SHADOW WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM INFLATION_SHADOW WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GAS_PRICE_SHADOW WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DELETE FROM GLOBAL_ASSUMPTIONS_SHADOW WHERE
			GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		--
		-- Update tag
		--

		UPDATE GLOBAL_ASSUMPTIONS SET MODIFIED_BY='IHS' WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO



GRANT EXEC ON [PROC_RESTORE_GLOBALS] TO [abu]
GO

IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_BACKUP_COMPANY')
	DROP PROCEDURE [PROC_BACKUP_COMPANY]
GO
CREATE PROCEDURE [PROC_BACKUP_COMPANY] @PU_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM COMPANY_ADDITIONAL WHERE PU_ID = @PU_ID) != 'IHS'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		--
		-- Set id variables
		--

		--
		-- Delete old backup
		--

		DELETE FROM COMPANY_ADDITIONAL_SHADOW WHERE
			PU_ID = @PU_ID;

		DELETE FROM COMPANY_HEADER_SHADOW WHERE
			PU_ID = @PU_ID;

		--
		-- Backup data
		--

		INSERT INTO COMPANY_HEADER_SHADOW
			SELECT * FROM COMPANY_HEADER
			WHERE PU_ID = @PU_ID;

		INSERT INTO COMPANY_ADDITIONAL_SHADOW
			SELECT * FROM COMPANY_ADDITIONAL
			WHERE PU_ID = @PU_ID;

		--
		-- Update tag
		--

		UPDATE COMPANY_ADDITIONAL SET MODIFIED_BY='USER' WHERE PU_ID = @PU_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO

GRANT EXEC ON [PROC_BACKUP_COMPANY] TO [abu]
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='COMPANY_HEADER_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'COMPANY_HEADER';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='COMPANY_ADDITIONAL_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'COMPANY_ADDITIONAL';
GO



IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_RESTORE_COMPANY')
	DROP PROCEDURE [PROC_RESTORE_COMPANY]
GO
CREATE PROCEDURE [PROC_RESTORE_COMPANY] @PU_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM COMPANY_ADDITIONAL WHERE PU_ID = @PU_ID) != 'USER'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		--
		-- Set id variables
		--

		--
		-- Delete user version
		--

		DELETE FROM COMPANY_ADDITIONAL WHERE
			PU_ID = @PU_ID;

		DELETE FROM COMPANY_HEADER WHERE
			PU_ID = @PU_ID;

		--
		-- Set id variables acording to backed copy
		--

		--
		-- Restore data
		--

		INSERT INTO COMPANY_HEADER
			SELECT * FROM COMPANY_HEADER_SHADOW
			WHERE PU_ID = @PU_ID;

		INSERT INTO COMPANY_ADDITIONAL
			SELECT * FROM COMPANY_ADDITIONAL_SHADOW
			WHERE PU_ID = @PU_ID;

		--
		-- Delete backup
		--

		DELETE FROM COMPANY_ADDITIONAL_SHADOW WHERE
			PU_ID = @PU_ID;

		DELETE FROM COMPANY_HEADER_SHADOW WHERE
			PU_ID = @PU_ID;

		--
		-- Update tag
		--

		UPDATE COMPANY_ADDITIONAL SET MODIFIED_BY='IHS' WHERE PU_ID = @PU_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO



GRANT EXEC ON [PROC_RESTORE_COMPANY] TO [abu]
GO

IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_BACKUP_FISCAL_TERMS')
	DROP PROCEDURE [PROC_BACKUP_FISCAL_TERMS]
GO
CREATE PROCEDURE [PROC_BACKUP_FISCAL_TERMS] @TAX_SYSTEM_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM TAX_SYSTEM WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID) != 'IHS'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		--
		-- Set id variables
		--

		--
		-- Delete old backup
		--

		DELETE FROM TAX_SYSTEM_SHEETS_SHADOW WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		DELETE FROM TAX_SYSTEM_SHADOW WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		--
		-- Backup data
		--

		INSERT INTO TAX_SYSTEM_SHADOW
			SELECT * FROM TAX_SYSTEM
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		INSERT INTO TAX_SYSTEM_SHEETS_SHADOW
			SELECT * FROM TAX_SYSTEM_SHEETS
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		--
		-- Update tag
		--

		UPDATE TAX_SYSTEM SET MODIFIED_BY='USER' WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO

GRANT EXEC ON [PROC_BACKUP_FISCAL_TERMS] TO [abu]
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='TAX_SYSTEM_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'TAX_SYSTEM';
GO

IF NOT EXISTS (SELECT name FROM sys.objects WHERE type='U' AND name='TAX_SYSTEM_SHEETS_SHADOW')
	EXEC PROC_CREATE_SHADOW_TABLE 'TAX_SYSTEM_SHEETS';
GO



IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='PROC_RESTORE_FISCAL_TERMS')
	DROP PROCEDURE [PROC_RESTORE_FISCAL_TERMS]
GO
CREATE PROCEDURE [PROC_RESTORE_FISCAL_TERMS] @TAX_SYSTEM_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON

	IF (SELECT MODIFIED_BY FROM TAX_SYSTEM WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID) != 'USER'
		RETURN -- No action required

	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION

		--
		-- Declare id variables
		--

		--
		-- Set id variables
		--

		--
		-- Save link
		--

		SELECT TAX_NODE_ID INTO #TEMP_TAX_NODE_TAX_NODE_IDS
			FROM TAX_NODE
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		--
		-- Break link
		--

		UPDATE TAX_NODE
			SET TAX_SYSTEM_ID = (SELECT TOP 1 TAX_SYSTEM_ID FROM TAX_SYSTEM WHERE TAX_SYSTEM_ID != @TAX_SYSTEM_ID)
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		--
		-- Delete user version
		--

		DELETE FROM TAX_SYSTEM_SHEETS WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		DELETE FROM TAX_SYSTEM WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		--
		-- Set id variables acording to backed copy
		--

		--
		-- Restore data
		--

		INSERT INTO TAX_SYSTEM
			SELECT * FROM TAX_SYSTEM_SHADOW
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		INSERT INTO TAX_SYSTEM_SHEETS
			SELECT * FROM TAX_SYSTEM_SHEETS_SHADOW
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		--
		-- Restore link
		--

		UPDATE TAX_NODE
			SET TAX_SYSTEM_ID = @TAX_SYSTEM_ID
			FROM TAX_NODE
			INNER JOIN #TEMP_TAX_NODE_TAX_NODE_IDS
			ON #TEMP_TAX_NODE_TAX_NODE_IDS.TAX_NODE_ID = TAX_NODE.TAX_NODE_ID;

		DROP TABLE #TEMP_TAX_NODE_TAX_NODE_IDS;

		--
		-- Delete backup
		--

		DELETE FROM TAX_SYSTEM_SHEETS_SHADOW WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		DELETE FROM TAX_SYSTEM_SHADOW WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		--
		-- Update tag
		--

		UPDATE TAX_SYSTEM SET MODIFIED_BY='IHS' WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO



GRANT EXEC ON [PROC_RESTORE_FISCAL_TERMS] TO [abu]
GO