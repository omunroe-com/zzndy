--
-- Default AssetBank database name is ABDB.
--
USE [ABDB]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_BACKUP_FIELD')
	DROP PROCEDURE [SP_BACKUP_FIELD]
GO
CREATE PROCEDURE [SP_BACKUP_FIELD] @FIE_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID) != 'IHS'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		DECLARE @TAX_NODE_ID DECIMAL(12,0)


		DECLARE @INV_ASS_ORIGINAL_ID DECIMAL(12,0)


		DECLARE @INV_ASS_REDIST_ID DECIMAL(12,0)


		--
		-- Set id variables
		--


		SELECT @TAX_NODE_ID = TAX_NODE_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_ORIGINAL_ID = INV_ASS_ORIGINAL_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_REDIST_ID = INV_ASS_REDIST_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;


		--
		-- Delete old backup
		--


		DELETE FROM FIELD_PHASE_DEVELOPMENT_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM PT_OTHER_INDICATOR_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_ECONOMIC_INDICATOR_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_GROUP_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_DATA_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_CON_CASH_FLOW_DATA_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM FIELD_RESV_LITHOLOGIES_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_RESERVOIRS_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_CONTRACTS_BLOCKS_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_ADDITIONAL_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM TAX_NODE_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM FIELD_HEADER_SHADOW WHERE
			FIE_ID = @FIE_ID;


		--
		-- Backup data
		--


		INSERT INTO FIELD_HEADER_SHADOW
			SELECT * FROM FIELD_HEADER
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO TAX_NODE_SHADOW
			SELECT * FROM TAX_NODE
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO INV_ASS_SHADOW
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		INSERT INTO INV_ASS_SHADOW
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;


		INSERT INTO FIELD_ADDITIONAL_SHADOW
			SELECT * FROM FIELD_ADDITIONAL
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO FIELD_CONTRACTS_BLOCKS_SHADOW
			SELECT * FROM FIELD_CONTRACTS_BLOCKS
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO FIELD_RESERVOIRS_SHADOW
			SELECT * FROM FIELD_RESERVOIRS
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO FIELD_RESV_LITHOLOGIES_SHADOW
			SELECT * FROM FIELD_RESV_LITHOLOGIES
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO PT_CON_CASH_FLOW_DATA_SHADOW
			SELECT * FROM PT_CON_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_DETAIL_CASH_FLOW_DATA_SHADOW
			SELECT * FROM PT_DETAIL_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_DETAIL_CASH_FLOW_GROUP_SHADOW
			SELECT * FROM PT_DETAIL_CASH_FLOW_GROUP
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW
			SELECT * FROM PT_DETAIL_CASH_FLOW_TIMESERIES
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_ECONOMIC_INDICATOR_SHADOW
			SELECT * FROM PT_ECONOMIC_INDICATOR
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_OTHER_INDICATOR_SHADOW
			SELECT * FROM PT_OTHER_INDICATOR
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO INV_ASS_DATA_SHADOW
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		INSERT INTO INV_ASS_DATA_SHADOW
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;


		INSERT INTO INV_ASS_TUPLE_DATA_SHADOW
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		INSERT INTO INV_ASS_TUPLE_DATA_SHADOW
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;


		INSERT INTO FIELD_PHASE_DEVELOPMENT_SHADOW
			SELECT * FROM FIELD_PHASE_DEVELOPMENT
			WHERE FIE_ID = @FIE_ID;


		--
		-- Update tag
		--


		UPDATE FIELD_ADDITIONAL SET MODIFIED_BY='USER' WHERE FIE_ID = @FIE_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO


GRANT EXEC ON [SP_BACKUP_FIELD] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_RESTORE_FIELD')
	DROP PROCEDURE [SP_RESTORE_FIELD]
GO
CREATE PROCEDURE [SP_RESTORE_FIELD] @FIE_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID) != 'USER'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		DECLARE @TAX_NODE_ID DECIMAL(12,0)


		DECLARE @INV_ASS_ORIGINAL_ID DECIMAL(12,0)


		DECLARE @INV_ASS_REDIST_ID DECIMAL(12,0)


		--
		-- Set id variables
		--


		SELECT @TAX_NODE_ID = TAX_NODE_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_ORIGINAL_ID = INV_ASS_ORIGINAL_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_REDIST_ID = INV_ASS_REDIST_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID;


		--
		-- Delete user version
		--


		DELETE FROM FIELD_PHASE_DEVELOPMENT WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM INV_ASS_TUPLE_DATA WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS_TUPLE_DATA WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM INV_ASS_DATA WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS_DATA WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM PT_OTHER_INDICATOR WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_ECONOMIC_INDICATOR WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_TIMESERIES WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_GROUP WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_DATA WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_CON_CASH_FLOW_DATA WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM FIELD_RESV_LITHOLOGIES WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_RESERVOIRS WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_CONTRACTS_BLOCKS WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_ADDITIONAL WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM INV_ASS WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM TAX_NODE WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM FIELD_HEADER WHERE
			FIE_ID = @FIE_ID;


		--
		-- Set id variables acording to backed copy
		--


		SELECT @TAX_NODE_ID = TAX_NODE_ID FROM FIELD_ADDITIONAL_SHADOW WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_ORIGINAL_ID = INV_ASS_ORIGINAL_ID FROM FIELD_ADDITIONAL_SHADOW WHERE FIE_ID = @FIE_ID;

		SELECT @INV_ASS_REDIST_ID = INV_ASS_REDIST_ID FROM FIELD_ADDITIONAL_SHADOW WHERE FIE_ID = @FIE_ID;


		--
		-- Restore data
		--


		INSERT INTO FIELD_HEADER
			SELECT * FROM FIELD_HEADER_SHADOW
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO TAX_NODE
			SELECT * FROM TAX_NODE_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO INV_ASS
			SELECT * FROM INV_ASS_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		INSERT INTO INV_ASS
			SELECT * FROM INV_ASS_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;


		INSERT INTO FIELD_ADDITIONAL
			SELECT * FROM FIELD_ADDITIONAL_SHADOW
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO FIELD_CONTRACTS_BLOCKS
			SELECT * FROM FIELD_CONTRACTS_BLOCKS_SHADOW
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO FIELD_RESERVOIRS
			SELECT * FROM FIELD_RESERVOIRS_SHADOW
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO FIELD_RESV_LITHOLOGIES
			SELECT * FROM FIELD_RESV_LITHOLOGIES_SHADOW
			WHERE FIE_ID = @FIE_ID;


		INSERT INTO PT_CON_CASH_FLOW_DATA
			SELECT * FROM PT_CON_CASH_FLOW_DATA_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_DETAIL_CASH_FLOW_DATA
			SELECT * FROM PT_DETAIL_CASH_FLOW_DATA_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_DETAIL_CASH_FLOW_GROUP
			SELECT * FROM PT_DETAIL_CASH_FLOW_GROUP_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_DETAIL_CASH_FLOW_TIMESERIES
			SELECT * FROM PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_ECONOMIC_INDICATOR
			SELECT * FROM PT_ECONOMIC_INDICATOR_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO PT_OTHER_INDICATOR
			SELECT * FROM PT_OTHER_INDICATOR_SHADOW
			WHERE TAX_NODE_ID = @TAX_NODE_ID;


		INSERT INTO INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		INSERT INTO INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;


		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;


		INSERT INTO FIELD_PHASE_DEVELOPMENT
			SELECT * FROM FIELD_PHASE_DEVELOPMENT_SHADOW
			WHERE FIE_ID = @FIE_ID;


		--
		-- Delete backup
		--


		DELETE FROM FIELD_PHASE_DEVELOPMENT_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM PT_OTHER_INDICATOR_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_ECONOMIC_INDICATOR_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_TIMESERIES_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_GROUP_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_DETAIL_CASH_FLOW_DATA_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM PT_CON_CASH_FLOW_DATA_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM FIELD_RESV_LITHOLOGIES_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_RESERVOIRS_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_CONTRACTS_BLOCKS_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM FIELD_ADDITIONAL_SHADOW WHERE
			FIE_ID = @FIE_ID;


		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_REDIST_ID;


		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ORIGINAL_ID;


		DELETE FROM TAX_NODE_SHADOW WHERE
			TAX_NODE_ID = @TAX_NODE_ID;


		DELETE FROM FIELD_HEADER_SHADOW WHERE
			FIE_ID = @FIE_ID;


		--
		-- Update tag
		--


		UPDATE FIELD_ADDITIONAL SET MODIFIED_BY='IHS' WHERE FIE_ID = @FIE_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO





GRANT EXEC ON [SP_RESTORE_FIELD] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_BACKUP_BLOCK')
	DROP PROCEDURE [SP_BACKUP_BLOCK]
GO
CREATE PROCEDURE [SP_BACKUP_BLOCK] @GA_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM BLOCK_ADDITIONAL WHERE GA_ID = @GA_ID) != 'IHS'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		DECLARE @PAR_ID DECIMAL(12,0)


		DECLARE @EPC_ID DECIMAL(12,0)


		--
		-- Set id variables
		--


		SELECT @PAR_ID = PAR_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;

		SELECT @EPC_ID = EPC_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;


		--
		-- Delete old backup
		--


		DELETE FROM FIELD_CONTRACTS_BLOCKS_SHADOW WHERE
			GA_ID = @GA_ID;


		DELETE FROM BLOCK_ADDITIONAL_SHADOW WHERE
			GA_ID = @GA_ID;


		DELETE FROM CONTRACT_ADDITIONAL_SHADOW WHERE
			EPC_ID = @EPC_ID;


		DELETE FROM BLOCK_HEADER_SHADOW WHERE
			GA_ID = @GA_ID;


		DELETE FROM CONTRACT_HEADER_SHADOW WHERE
			EPC_ID = @EPC_ID;


		DELETE FROM GROUP_PARTNER_INTERESTS_SHADOW WHERE
			PAR_ID = @PAR_ID;


		--
		-- Backup data
		--


		INSERT INTO GROUP_PARTNER_INTERESTS_SHADOW
			SELECT * FROM GROUP_PARTNER_INTERESTS
			WHERE PAR_ID = @PAR_ID;


		INSERT INTO CONTRACT_HEADER_SHADOW
			SELECT * FROM CONTRACT_HEADER
			WHERE EPC_ID = @EPC_ID;


		INSERT INTO BLOCK_HEADER_SHADOW
			SELECT * FROM BLOCK_HEADER
			WHERE GA_ID = @GA_ID;


		INSERT INTO CONTRACT_ADDITIONAL_SHADOW
			SELECT * FROM CONTRACT_ADDITIONAL
			WHERE EPC_ID = @EPC_ID;


		INSERT INTO BLOCK_ADDITIONAL_SHADOW
			SELECT * FROM BLOCK_ADDITIONAL
			WHERE GA_ID = @GA_ID;


		INSERT INTO FIELD_CONTRACTS_BLOCKS_SHADOW
			SELECT * FROM FIELD_CONTRACTS_BLOCKS
			WHERE GA_ID = @GA_ID;


		--
		-- Update tag
		--


		UPDATE BLOCK_ADDITIONAL SET MODIFIED_BY='USER' WHERE GA_ID = @GA_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO


GRANT EXEC ON [SP_BACKUP_BLOCK] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_RESTORE_BLOCK')
	DROP PROCEDURE [SP_RESTORE_BLOCK]
GO
CREATE PROCEDURE [SP_RESTORE_BLOCK] @GA_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM BLOCK_ADDITIONAL WHERE GA_ID = @GA_ID) != 'USER'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		DECLARE @PAR_ID DECIMAL(12,0)


		DECLARE @EPC_ID DECIMAL(12,0)


		--
		-- Set id variables
		--


		SELECT @PAR_ID = PAR_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;

		SELECT @EPC_ID = EPC_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;


		--
		-- Delete user version
		--


		DELETE FROM FIELD_CONTRACTS_BLOCKS WHERE
			GA_ID = @GA_ID;


		DELETE FROM BLOCK_ADDITIONAL WHERE
			GA_ID = @GA_ID;


		DELETE FROM CONTRACT_ADDITIONAL WHERE
			EPC_ID = @EPC_ID;


		DELETE FROM BLOCK_HEADER WHERE
			GA_ID = @GA_ID;


		DELETE FROM CONTRACT_HEADER WHERE
			EPC_ID = @EPC_ID;


		DELETE FROM GROUP_PARTNER_INTERESTS WHERE
			PAR_ID = @PAR_ID;


		--
		-- Set id variables acording to backed copy
		--


		SELECT @PAR_ID = PAR_ID FROM BLOCK_HEADER_SHADOW WHERE GA_ID = @GA_ID;

		SELECT @EPC_ID = EPC_ID FROM BLOCK_HEADER_SHADOW WHERE GA_ID = @GA_ID;


		--
		-- Restore data
		--


		INSERT INTO GROUP_PARTNER_INTERESTS
			SELECT * FROM GROUP_PARTNER_INTERESTS_SHADOW
			WHERE PAR_ID = @PAR_ID;


		INSERT INTO CONTRACT_HEADER
			SELECT * FROM CONTRACT_HEADER_SHADOW
			WHERE EPC_ID = @EPC_ID;


		INSERT INTO BLOCK_HEADER
			SELECT * FROM BLOCK_HEADER_SHADOW
			WHERE GA_ID = @GA_ID;


		INSERT INTO CONTRACT_ADDITIONAL
			SELECT * FROM CONTRACT_ADDITIONAL_SHADOW
			WHERE EPC_ID = @EPC_ID;


		INSERT INTO BLOCK_ADDITIONAL
			SELECT * FROM BLOCK_ADDITIONAL_SHADOW
			WHERE GA_ID = @GA_ID;


		INSERT INTO FIELD_CONTRACTS_BLOCKS
			SELECT * FROM FIELD_CONTRACTS_BLOCKS_SHADOW
			WHERE GA_ID = @GA_ID;


		--
		-- Delete backup
		--


		DELETE FROM FIELD_CONTRACTS_BLOCKS_SHADOW WHERE
			GA_ID = @GA_ID;


		DELETE FROM BLOCK_ADDITIONAL_SHADOW WHERE
			GA_ID = @GA_ID;


		DELETE FROM CONTRACT_ADDITIONAL_SHADOW WHERE
			EPC_ID = @EPC_ID;


		DELETE FROM BLOCK_HEADER_SHADOW WHERE
			GA_ID = @GA_ID;


		DELETE FROM CONTRACT_HEADER_SHADOW WHERE
			EPC_ID = @EPC_ID;


		DELETE FROM GROUP_PARTNER_INTERESTS_SHADOW WHERE
			PAR_ID = @PAR_ID;


		--
		-- Update tag
		--


		UPDATE BLOCK_ADDITIONAL SET MODIFIED_BY='IHS' WHERE GA_ID = @GA_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO





GRANT EXEC ON [SP_RESTORE_BLOCK] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_BACKUP_COMPLEX')
	DROP PROCEDURE [SP_BACKUP_COMPLEX]
GO
CREATE PROCEDURE [SP_BACKUP_COMPLEX] @FIELD_COMPLEX_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID) != 'IHS'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		DECLARE @INV_ASS_ID DECIMAL(12,0)


		--
		-- Set id variables
		--


		SELECT @INV_ASS_ID = INV_ASS_ID FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		--
		-- Delete old backup
		--


		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;


		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;


		DELETE FROM FIELD_COMPLEX_SHADOW WHERE
			FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;


		--
		-- Backup data
		--


		INSERT INTO INV_ASS_SHADOW
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_ID;


		INSERT INTO FIELD_COMPLEX_SHADOW
			SELECT * FROM FIELD_COMPLEX
			WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		INSERT INTO INV_ASS_DATA_SHADOW
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_ID;


		INSERT INTO INV_ASS_TUPLE_DATA_SHADOW
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_ID;


		--
		-- Update tag
		--


		UPDATE FIELD_COMPLEX SET MODIFIED_BY='USER' WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO


GRANT EXEC ON [SP_BACKUP_COMPLEX] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_RESTORE_COMPLEX')
	DROP PROCEDURE [SP_RESTORE_COMPLEX]
GO
CREATE PROCEDURE [SP_RESTORE_COMPLEX] @FIELD_COMPLEX_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID) != 'USER'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		DECLARE @INV_ASS_ID DECIMAL(12,0)


		--
		-- Set id variables
		--


		SELECT @INV_ASS_ID = INV_ASS_ID FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		--
		-- Delete user version
		--


		DELETE FROM INV_ASS_TUPLE_DATA WHERE
			INV_ASS_ID = @INV_ASS_ID;


		DELETE FROM INV_ASS_DATA WHERE
			INV_ASS_ID = @INV_ASS_ID;


		DELETE FROM FIELD_COMPLEX WHERE
			FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		DELETE FROM INV_ASS WHERE
			INV_ASS_ID = @INV_ASS_ID;


		--
		-- Set id variables acording to backed copy
		--


		SELECT @INV_ASS_ID = INV_ASS_ID FROM FIELD_COMPLEX_SHADOW WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		--
		-- Restore data
		--


		INSERT INTO INV_ASS
			SELECT * FROM INV_ASS_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ID;


		INSERT INTO FIELD_COMPLEX
			SELECT * FROM FIELD_COMPLEX_SHADOW
			WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		INSERT INTO INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ID;


		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA_SHADOW
			WHERE INV_ASS_ID = @INV_ASS_ID;


		--
		-- Delete backup
		--


		DELETE FROM INV_ASS_TUPLE_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;


		DELETE FROM INV_ASS_DATA_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;


		DELETE FROM FIELD_COMPLEX_SHADOW WHERE
			FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		DELETE FROM INV_ASS_SHADOW WHERE
			INV_ASS_ID = @INV_ASS_ID;


		--
		-- Update tag
		--


		UPDATE FIELD_COMPLEX SET MODIFIED_BY='IHS' WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO





GRANT EXEC ON [SP_RESTORE_COMPLEX] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_BACKUP_GLOBALS')
	DROP PROCEDURE [SP_BACKUP_GLOBALS]
GO
CREATE PROCEDURE [SP_BACKUP_GLOBALS] @GLOBAL_ASSUMPTIONS_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM GLOBAL_ASSUMPTIONS WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID) != 'IHS'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		--
		-- Set id variables
		--





		--
		-- Delete old backup
		--


		DELETE FROM LIQUID_PRICE_DATA_SHADOW WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM INFLATION_DATA_SHADOW WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GAS_PRICE_DATA_SHADOW WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM LIQUID_PRICE_SHADOW WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM INFLATION_SHADOW WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GAS_PRICE_SHADOW WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GLOBAL_ASSUMPTIONS_SHADOW WHERE
			GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;


		--
		-- Backup data
		--


		INSERT INTO GLOBAL_ASSUMPTIONS_SHADOW
			SELECT * FROM GLOBAL_ASSUMPTIONS
			WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;


		INSERT INTO GAS_PRICE_SHADOW
			SELECT * FROM GAS_PRICE
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO INFLATION_SHADOW
			SELECT * FROM INFLATION
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO LIQUID_PRICE_SHADOW
			SELECT * FROM LIQUID_PRICE
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO GAS_PRICE_DATA_SHADOW
			SELECT * FROM GAS_PRICE_DATA
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO INFLATION_DATA_SHADOW
			SELECT * FROM INFLATION_DATA
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO LIQUID_PRICE_DATA_SHADOW
			SELECT * FROM LIQUID_PRICE_DATA
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		--
		-- Update tag
		--


		UPDATE GLOBAL_ASSUMPTIONS SET MODIFIED_BY='USER' WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO


GRANT EXEC ON [SP_BACKUP_GLOBALS] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_RESTORE_GLOBALS')
	DROP PROCEDURE [SP_RESTORE_GLOBALS]
GO
CREATE PROCEDURE [SP_RESTORE_GLOBALS] @GLOBAL_ASSUMPTIONS_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM GLOBAL_ASSUMPTIONS WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID) != 'USER'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		--
		-- Set id variables
		--





		--
		-- Delete user version
		--


		DELETE FROM LIQUID_PRICE_DATA WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM INFLATION_DATA WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GAS_PRICE_DATA WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM LIQUID_PRICE WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM INFLATION WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GAS_PRICE WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GLOBAL_ASSUMPTIONS WHERE
			GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;


		--
		-- Set id variables acording to backed copy
		--





		--
		-- Restore data
		--


		INSERT INTO GLOBAL_ASSUMPTIONS
			SELECT * FROM GLOBAL_ASSUMPTIONS_SHADOW
			WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;


		INSERT INTO GAS_PRICE
			SELECT * FROM GAS_PRICE_SHADOW
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO INFLATION
			SELECT * FROM INFLATION_SHADOW
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO LIQUID_PRICE
			SELECT * FROM LIQUID_PRICE_SHADOW
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO GAS_PRICE_DATA
			SELECT * FROM GAS_PRICE_DATA_SHADOW
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO INFLATION_DATA
			SELECT * FROM INFLATION_DATA_SHADOW
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		INSERT INTO LIQUID_PRICE_DATA
			SELECT * FROM LIQUID_PRICE_DATA_SHADOW
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE_SHADOW WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		--
		-- Delete backup
		--


		DELETE FROM LIQUID_PRICE_DATA_SHADOW WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM INFLATION_DATA_SHADOW WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GAS_PRICE_DATA_SHADOW WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM LIQUID_PRICE_SHADOW WHERE
			LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM INFLATION_SHADOW WHERE
			INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GAS_PRICE_SHADOW WHERE
			GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);


		DELETE FROM GLOBAL_ASSUMPTIONS_SHADOW WHERE
			GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;


		--
		-- Update tag
		--


		UPDATE GLOBAL_ASSUMPTIONS SET MODIFIED_BY='IHS' WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO





GRANT EXEC ON [SP_RESTORE_GLOBALS] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_BACKUP_COMPANY')
	DROP PROCEDURE [SP_BACKUP_COMPANY]
GO
CREATE PROCEDURE [SP_BACKUP_COMPANY] @PU_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM COMPANY_ADDITIONAL WHERE PU_ID = @PU_ID) != 'IHS'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		--
		-- Set id variables
		--


		--
		-- Delete old backup
		--


		DELETE FROM COMPANY_ADDITIONAL_SHADOW WHERE
			PU_ID = @PU_ID;


		DELETE FROM COMPANY_HEADER_SHADOW WHERE
			PU_ID = @PU_ID;


		--
		-- Backup data
		--


		INSERT INTO COMPANY_HEADER_SHADOW
			SELECT * FROM COMPANY_HEADER
			WHERE PU_ID = @PU_ID;


		INSERT INTO COMPANY_ADDITIONAL_SHADOW
			SELECT * FROM COMPANY_ADDITIONAL
			WHERE PU_ID = @PU_ID;


		--
		-- Update tag
		--


		UPDATE COMPANY_ADDITIONAL SET MODIFIED_BY='USER' WHERE PU_ID = @PU_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO


GRANT EXEC ON [SP_BACKUP_COMPANY] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_RESTORE_COMPANY')
	DROP PROCEDURE [SP_RESTORE_COMPANY]
GO
CREATE PROCEDURE [SP_RESTORE_COMPANY] @PU_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM COMPANY_ADDITIONAL WHERE PU_ID = @PU_ID) != 'USER'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		--
		-- Set id variables
		--


		--
		-- Delete user version
		--


		DELETE FROM COMPANY_ADDITIONAL WHERE
			PU_ID = @PU_ID;


		DELETE FROM COMPANY_HEADER WHERE
			PU_ID = @PU_ID;


		--
		-- Set id variables acording to backed copy
		--


		--
		-- Restore data
		--


		INSERT INTO COMPANY_HEADER
			SELECT * FROM COMPANY_HEADER_SHADOW
			WHERE PU_ID = @PU_ID;


		INSERT INTO COMPANY_ADDITIONAL
			SELECT * FROM COMPANY_ADDITIONAL_SHADOW
			WHERE PU_ID = @PU_ID;


		--
		-- Delete backup
		--


		DELETE FROM COMPANY_ADDITIONAL_SHADOW WHERE
			PU_ID = @PU_ID;


		DELETE FROM COMPANY_HEADER_SHADOW WHERE
			PU_ID = @PU_ID;


		--
		-- Update tag
		--


		UPDATE COMPANY_ADDITIONAL SET MODIFIED_BY='IHS' WHERE PU_ID = @PU_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO





GRANT EXEC ON [SP_RESTORE_COMPANY] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_BACKUP_TAXSYSTEM')
	DROP PROCEDURE [SP_BACKUP_TAXSYSTEM]
GO
CREATE PROCEDURE [SP_BACKUP_TAXSYSTEM] @TAX_SYSTEM_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM TAX_SYSTEM WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID) != 'IHS'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		--
		-- Set id variables
		--


		--
		-- Delete old backup
		--


		DELETE FROM TAX_SYSTEM_SHEETS_SHADOW WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		DELETE FROM TAX_SYSTEM_SHADOW WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		--
		-- Backup data
		--


		INSERT INTO TAX_SYSTEM_SHADOW
			SELECT * FROM TAX_SYSTEM
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		INSERT INTO TAX_SYSTEM_SHEETS_SHADOW
			SELECT * FROM TAX_SYSTEM_SHEETS
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		--
		-- Update tag
		--


		UPDATE TAX_SYSTEM SET MODIFIED_BY='USER' WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO


GRANT EXEC ON [SP_BACKUP_TAXSYSTEM] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_RESTORE_TAXSYSTEM')
	DROP PROCEDURE [SP_RESTORE_TAXSYSTEM]
GO
CREATE PROCEDURE [SP_RESTORE_TAXSYSTEM] @TAX_SYSTEM_ID DECIMAL (12,0)
AS
BEGIN
	SET NOCOUNT ON


	IF (SELECT MODIFIED_BY FROM TAX_SYSTEM WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID) != 'USER'
		RETURN -- No action required


	DECLARE @ERROR_PROCEDURE NVARCHAR(255);

	DECLARE @ERROR_MESSAGE NVARCHAR(255);

	BEGIN TRY
		BEGIN TRANSACTION


		--
		-- Declare id variables
		--


		--
		-- Set id variables
		--


		--
		-- Delete user version
		--


		DELETE FROM TAX_SYSTEM_SHEETS WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		DELETE FROM TAX_SYSTEM WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		--
		-- Set id variables acording to backed copy
		--


		--
		-- Restore data
		--


		INSERT INTO TAX_SYSTEM
			SELECT * FROM TAX_SYSTEM_SHADOW
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		INSERT INTO TAX_SYSTEM_SHEETS
			SELECT * FROM TAX_SYSTEM_SHEETS_SHADOW
			WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		--
		-- Delete backup
		--


		DELETE FROM TAX_SYSTEM_SHEETS_SHADOW WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		DELETE FROM TAX_SYSTEM_SHADOW WHERE
			TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		--
		-- Update tag
		--


		UPDATE TAX_SYSTEM SET MODIFIED_BY='IHS' WHERE TAX_SYSTEM_ID = @TAX_SYSTEM_ID;


		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @ERROR_PROCEDURE = ERROR_PROCEDURE(), @ERROR_MESSAGE = ERROR_MESSAGE();

		RAISERROR('%s failed: %s', 15, 1, @ERROR_PROCEDURE, @ERROR_MESSAGE);

		RETURN 1
	END CATCH

END
GO


GRANT EXEC ON [SP_RESTORE_TAXSYSTEM] TO [abu]
GO


--
-- Create tables to backup field domain object.
--
EXEC SP_CREATE_SHADOW_TABLE 'FIELD_HEADER';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'FIELD_ADDITIONAL';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'FIELD_CONTRACTS_BLOCKS';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'FIELD_PHASE_DEVELOPMENT';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'FIELD_RESERVOIRS';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'FIELD_RESV_LITHOLOGIES';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'PT_CON_CASH_FLOW_DATA';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'TAX_NODE';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'PT_DETAIL_CASH_FLOW_DATA';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'PT_DETAIL_CASH_FLOW_GROUP';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'PT_DETAIL_CASH_FLOW_TIMESERIES';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'PT_ECONOMIC_INDICATOR';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'PT_OTHER_INDICATOR';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'INV_ASS';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'INV_ASS_DATA';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'INV_ASS_TUPLE_DATA';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'BLOCK_HEADER';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'BLOCK_ADDITIONAL';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'GROUP_PARTNER_INTERESTS';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'CONTRACT_HEADER';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'CONTRACT_ADDITIONAL';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'FIELD_COMPLEX';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'GLOBAL_ASSUMPTIONS';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'GAS_PRICE_DATA';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'GAS_PRICE';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'INFLATION_DATA';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'INFLATION';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'LIQUID_PRICE_DATA';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'LIQUID_PRICE';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'COMPANY_HEADER';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'COMPANY_ADDITIONAL';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'TAX_SYSTEM';  
GO  
EXEC SP_CREATE_SHADOW_TABLE 'TAX_SYSTEM_SHEETS';  
GO  