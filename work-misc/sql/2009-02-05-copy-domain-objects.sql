--
-- Default AssetBank database name is ABDB.
--
USE [ABDB]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_CLONE_FIELD')
	DROP PROCEDURE [SP_CLONE_FIELD]
GO
CREATE PROCEDURE [SP_CLONE_FIELD] @FIE_ID DECIMAL (12,0), @NEW_FIE_ID DECIMAL (12,0) OUTPUT
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRANSACTION
	BEGIN TRY

		--
		-- Create temporary tables (Just copy tables structure)
		--

		SELECT * INTO #FIELD_HEADER
			FROM FIELD_HEADER WHERE 42=10;

		SELECT * INTO #TAX_NODE
			FROM TAX_NODE WHERE 42=10;

		SELECT * INTO #INV_ASS
			FROM INV_ASS WHERE 42=10;

		SELECT * INTO #FIELD_ADDITIONAL
			FROM FIELD_ADDITIONAL WHERE 42=10;

		SELECT * INTO #FIELD_CONTRACTS_BLOCKS
			FROM FIELD_CONTRACTS_BLOCKS WHERE 42=10;

		SELECT * INTO #FIELD_RESERVOIRS
			FROM FIELD_RESERVOIRS WHERE 42=10;

		SELECT * INTO #FIELD_RESV_LITHOLOGIES
			FROM FIELD_RESV_LITHOLOGIES WHERE 42=10;

		SELECT * INTO #PT_CON_CASH_FLOW_DATA
			FROM PT_CON_CASH_FLOW_DATA WHERE 42=10;

		SELECT * INTO #PT_DETAIL_CASH_FLOW_DATA
			FROM PT_DETAIL_CASH_FLOW_DATA WHERE 42=10;

		SELECT * INTO #PT_DETAIL_CASH_FLOW_GROUP
			FROM PT_DETAIL_CASH_FLOW_GROUP WHERE 42=10;

		SELECT * INTO #PT_DETAIL_CASH_FLOW_TIMESERIES
			FROM PT_DETAIL_CASH_FLOW_TIMESERIES WHERE 42=10;

		SELECT * INTO #PT_ECONOMIC_INDICATOR
			FROM PT_ECONOMIC_INDICATOR WHERE 42=10;

		SELECT * INTO #PT_OTHER_INDICATOR
			FROM PT_OTHER_INDICATOR WHERE 42=10;

		SELECT * INTO #INV_ASS_DATA
			FROM INV_ASS_DATA WHERE 42=10;

		SELECT * INTO #INV_ASS_TUPLE_DATA
			FROM INV_ASS_TUPLE_DATA WHERE 42=10;

		SELECT * INTO #FIELD_PHASE_DEVELOPMENT
			FROM FIELD_PHASE_DEVELOPMENT WHERE 42=10;

		--
		-- Declare id variables
		--

		DECLARE @TAX_NODE_ID DECIMAL(12,0)

		DECLARE @INV_ASS_ORIGINAL_ID DECIMAL(12,0)

		DECLARE @INV_ASS_REDIST_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @TAX_NODE_ID = TAX_NODE_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID

		SELECT @INV_ASS_ORIGINAL_ID = INV_ASS_ORIGINAL_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID

		SELECT @INV_ASS_REDIST_ID = INV_ASS_REDIST_ID FROM FIELD_ADDITIONAL WHERE FIE_ID = @FIE_ID

		--
		-- 'Backup' specifyed object to temporaties
		--

		INSERT INTO #FIELD_HEADER
			SELECT * FROM FIELD_HEADER
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #TAX_NODE
			SELECT * FROM TAX_NODE
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #INV_ASS
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO #INV_ASS
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO #FIELD_ADDITIONAL
			SELECT * FROM FIELD_ADDITIONAL
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #FIELD_CONTRACTS_BLOCKS
			SELECT * FROM FIELD_CONTRACTS_BLOCKS
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #FIELD_RESERVOIRS
			SELECT * FROM FIELD_RESERVOIRS
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #FIELD_RESV_LITHOLOGIES
			SELECT * FROM FIELD_RESV_LITHOLOGIES
			WHERE FIE_ID = @FIE_ID;

		INSERT INTO #PT_CON_CASH_FLOW_DATA
			SELECT * FROM PT_CON_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_DETAIL_CASH_FLOW_DATA
			SELECT * FROM PT_DETAIL_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_DETAIL_CASH_FLOW_GROUP
			SELECT * FROM PT_DETAIL_CASH_FLOW_GROUP
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_DETAIL_CASH_FLOW_TIMESERIES
			SELECT * FROM PT_DETAIL_CASH_FLOW_TIMESERIES
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_ECONOMIC_INDICATOR
			SELECT * FROM PT_ECONOMIC_INDICATOR
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #PT_OTHER_INDICATOR
			SELECT * FROM PT_OTHER_INDICATOR
			WHERE TAX_NODE_ID = @TAX_NODE_ID;

		INSERT INTO #INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO #INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO #INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		INSERT INTO #INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		INSERT INTO #FIELD_PHASE_DEVELOPMENT
			SELECT * FROM FIELD_PHASE_DEVELOPMENT
			WHERE FIE_ID = @FIE_ID;

		DECLARE @NAME VARCHAR(50)
		SELECT @NAME = 'Copy of ' + FIELD_NAME FROM #FIELD_HEADER WHERE FIE_ID = @FIE_ID;
		
		DECLARE @N INT;
		SET @N = 1;
		
		WHILE EXISTS (SELECT FIELD_NAME FROM FIELD_HEADER WHERE FIELD_NAME = @NAME)
		BEGIN
			SELECT @NAME = 'Copy of ' + FIELD_NAME + ' (' + CONVERT(VARCHAR(2), @N) + ')'
				FROM #FIELD_HEADER WHERE FIE_ID = @FIE_ID;
		
			SET @N = @N + 1;
		END

		UPDATE #FIELD_HEADER SET FIELD_NAME = @NAME WHERE FIE_ID = @FIE_ID;

		--
		-- Get new IDs
		--

		DECLARE @NEW_TAX_NODE_ID DECIMAL (12, 0);

		DECLARE @NEW_INV_ASS_ORIGINAL_ID DECIMAL (12, 0);

		DECLARE @NEW_INV_ASS_REDIST_ID DECIMAL (12, 0);

		EXEC sp_GenerateNumericIdentity @NEW_FIE_ID OUTPUT, 'FIELD_HEADER', 'FIE_ID';

		EXEC sp_GenerateNumericIdentity @NEW_TAX_NODE_ID OUTPUT, 'TAX_NODE', 'TAX_NODE_ID';

		EXEC sp_GenerateNumericIdentity @NEW_INV_ASS_ORIGINAL_ID OUTPUT, 'INV_ASS', 'INV_ASS_ID';

		EXEC sp_GenerateNumericIdentity @NEW_INV_ASS_REDIST_ID OUTPUT, 'INV_ASS', 'INV_ASS_ID';

		--
		-- Update IDs
		--

		UPDATE #FIELD_HEADER SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #TAX_NODE SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #INV_ASS SET INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		UPDATE #INV_ASS SET INV_ASS_ID = @NEW_INV_ASS_REDIST_ID WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		UPDATE #FIELD_ADDITIONAL SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #FIELD_CONTRACTS_BLOCKS SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #FIELD_RESERVOIRS SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #FIELD_RESV_LITHOLOGIES SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		UPDATE #PT_CON_CASH_FLOW_DATA SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_DETAIL_CASH_FLOW_DATA SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_DETAIL_CASH_FLOW_GROUP SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_DETAIL_CASH_FLOW_TIMESERIES SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_ECONOMIC_INDICATOR SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #PT_OTHER_INDICATOR SET TAX_NODE_ID = @NEW_TAX_NODE_ID WHERE TAX_NODE_ID = @TAX_NODE_ID;

		UPDATE #INV_ASS_DATA SET INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		UPDATE #INV_ASS_DATA SET INV_ASS_ID = @NEW_INV_ASS_REDIST_ID WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		UPDATE #INV_ASS_TUPLE_DATA SET INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID WHERE INV_ASS_ID = @INV_ASS_ORIGINAL_ID;

		UPDATE #INV_ASS_TUPLE_DATA SET INV_ASS_ID = @NEW_INV_ASS_REDIST_ID WHERE INV_ASS_ID = @INV_ASS_REDIST_ID;

		UPDATE #FIELD_PHASE_DEVELOPMENT SET FIE_ID = @NEW_FIE_ID WHERE FIE_ID = @FIE_ID;

		DECLARE @NEW_RESV_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT RESV_ID
			FROM #FIELD_RESERVOIRS
			WHERE FIE_ID = @NEW_FIE_ID;

		OPEN CURS;

		DECLARE @RESV_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @RESV_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_RESV_ID OUTPUT, 'FIELD_RESERVOIRS', 'RESV_ID';

			UPDATE #FIELD_RESERVOIRS
				SET RESV_ID = @NEW_RESV_ID
				WHERE RESV_ID = @RESV_ID;

			FETCH NEXT FROM CURS INTO @RESV_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_PT_DETAIL_CASH_FLOW_GROUP_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PT_DETAIL_CASH_FLOW_GROUP_ID
			FROM #PT_DETAIL_CASH_FLOW_GROUP
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		OPEN CURS;

		DECLARE @PT_DETAIL_CASH_FLOW_GROUP_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @PT_DETAIL_CASH_FLOW_GROUP_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PT_DETAIL_CASH_FLOW_GROUP_ID OUTPUT, 'PT_DETAIL_CASH_FLOW_GROUP', 'PT_DETAIL_CASH_FLOW_GROUP_ID';

			UPDATE #PT_DETAIL_CASH_FLOW_GROUP
				SET PT_DETAIL_CASH_FLOW_GROUP_ID = @NEW_PT_DETAIL_CASH_FLOW_GROUP_ID
				WHERE PT_DETAIL_CASH_FLOW_GROUP_ID = @PT_DETAIL_CASH_FLOW_GROUP_ID;

			FETCH NEXT FROM CURS INTO @PT_DETAIL_CASH_FLOW_GROUP_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_PT_DETAIL_CASH_FLOW_TIMESERIES_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PT_DETAIL_CASH_FLOW_TIMESERIES_ID
			FROM #PT_DETAIL_CASH_FLOW_TIMESERIES
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		OPEN CURS;

		DECLARE @PT_DETAIL_CASH_FLOW_TIMESERIES_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @PT_DETAIL_CASH_FLOW_TIMESERIES_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PT_DETAIL_CASH_FLOW_TIMESERIES_ID OUTPUT, 'PT_DETAIL_CASH_FLOW_TIMESERIES', 'PT_DETAIL_CASH_FLOW_TIMESERIES_ID';

			UPDATE #PT_DETAIL_CASH_FLOW_TIMESERIES
				SET PT_DETAIL_CASH_FLOW_TIMESERIES_ID = @NEW_PT_DETAIL_CASH_FLOW_TIMESERIES_ID
				WHERE PT_DETAIL_CASH_FLOW_TIMESERIES_ID = @PT_DETAIL_CASH_FLOW_TIMESERIES_ID;

			UPDATE #PT_DETAIL_CASH_FLOW_DATA SET PT_DETAIL_CASH_FLOW_TIMESERIES_ID = @NEW_PT_DETAIL_CASH_FLOW_TIMESERIES_ID WHERE PT_DETAIL_CASH_FLOW_TIMESERIES_ID = @PT_DETAIL_CASH_FLOW_TIMESERIES_ID;

			FETCH NEXT FROM CURS INTO @PT_DETAIL_CASH_FLOW_TIMESERIES_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_PT_ECONOMIC_INDICATOR_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PT_ECONOMIC_INDICATOR_ID
			FROM #PT_ECONOMIC_INDICATOR
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		OPEN CURS;

		DECLARE @PT_ECONOMIC_INDICATOR_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @PT_ECONOMIC_INDICATOR_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PT_ECONOMIC_INDICATOR_ID OUTPUT, 'PT_ECONOMIC_INDICATOR', 'PT_ECONOMIC_INDICATOR_ID';

			UPDATE #PT_ECONOMIC_INDICATOR
				SET PT_ECONOMIC_INDICATOR_ID = @NEW_PT_ECONOMIC_INDICATOR_ID
				WHERE PT_ECONOMIC_INDICATOR_ID = @PT_ECONOMIC_INDICATOR_ID;

			FETCH NEXT FROM CURS INTO @PT_ECONOMIC_INDICATOR_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_PHASE_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT PHASE_ID
			FROM #FIELD_PHASE_DEVELOPMENT
			WHERE FIE_ID = @NEW_FIE_ID;

		OPEN CURS;

		DECLARE @PHASE_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @PHASE_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_PHASE_ID OUTPUT, 'FIELD_PHASE_DEVELOPMENT', 'PHASE_ID';

			UPDATE #FIELD_PHASE_DEVELOPMENT
				SET PHASE_ID = @NEW_PHASE_ID
				WHERE PHASE_ID = @PHASE_ID;

			FETCH NEXT FROM CURS INTO @PHASE_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		--
		-- 'Restore' copy
		--

		INSERT INTO FIELD_HEADER
			SELECT * FROM #FIELD_HEADER
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO TAX_NODE
			SELECT * FROM #TAX_NODE
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO INV_ASS
			SELECT * FROM #INV_ASS
			WHERE INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS
			SELECT * FROM #INV_ASS
			WHERE INV_ASS_ID = @NEW_INV_ASS_REDIST_ID;

		INSERT INTO FIELD_ADDITIONAL
			SELECT * FROM #FIELD_ADDITIONAL
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_CONTRACTS_BLOCKS
			SELECT * FROM #FIELD_CONTRACTS_BLOCKS
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_RESERVOIRS
			SELECT * FROM #FIELD_RESERVOIRS
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO FIELD_RESV_LITHOLOGIES
			SELECT * FROM #FIELD_RESV_LITHOLOGIES
			WHERE FIE_ID = @NEW_FIE_ID;

		INSERT INTO PT_CON_CASH_FLOW_DATA
			SELECT * FROM #PT_CON_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_DATA
			SELECT * FROM #PT_DETAIL_CASH_FLOW_DATA
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_GROUP
			SELECT * FROM #PT_DETAIL_CASH_FLOW_GROUP
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_DETAIL_CASH_FLOW_TIMESERIES
			SELECT * FROM #PT_DETAIL_CASH_FLOW_TIMESERIES
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_ECONOMIC_INDICATOR
			SELECT * FROM #PT_ECONOMIC_INDICATOR
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO PT_OTHER_INDICATOR
			SELECT * FROM #PT_OTHER_INDICATOR
			WHERE TAX_NODE_ID = @NEW_TAX_NODE_ID;

		INSERT INTO INV_ASS_DATA
			SELECT * FROM #INV_ASS_DATA
			WHERE INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_DATA
			SELECT * FROM #INV_ASS_DATA
			WHERE INV_ASS_ID = @NEW_INV_ASS_REDIST_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM #INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @NEW_INV_ASS_ORIGINAL_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM #INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @NEW_INV_ASS_REDIST_ID;

		INSERT INTO FIELD_PHASE_DEVELOPMENT
			SELECT * FROM #FIELD_PHASE_DEVELOPMENT
			WHERE FIE_ID = @NEW_FIE_ID;

		--
		-- Drop temporaries
		--

		DROP TABLE #FIELD_HEADER;

		DROP TABLE #TAX_NODE;

		DROP TABLE #INV_ASS;

		DROP TABLE #FIELD_ADDITIONAL;

		DROP TABLE #FIELD_CONTRACTS_BLOCKS;

		DROP TABLE #FIELD_RESERVOIRS;

		DROP TABLE #FIELD_RESV_LITHOLOGIES;

		DROP TABLE #PT_CON_CASH_FLOW_DATA;

		DROP TABLE #PT_DETAIL_CASH_FLOW_DATA;

		DROP TABLE #PT_DETAIL_CASH_FLOW_GROUP;

		DROP TABLE #PT_DETAIL_CASH_FLOW_TIMESERIES;

		DROP TABLE #PT_ECONOMIC_INDICATOR;

		DROP TABLE #PT_OTHER_INDICATOR;

		DROP TABLE #INV_ASS_DATA;

		DROP TABLE #INV_ASS_TUPLE_DATA;

		DROP TABLE #FIELD_PHASE_DEVELOPMENT;

		--
		-- Update tag
		--

		UPDATE FIELD_ADDITIONAL SET CREATED_BY='USER' WHERE FIE_ID = @FIE_ID;

	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		RETURN 1
	END CATCH

	COMMIT TRANSACTION
END
GO


GRANT EXEC ON [SP_CLONE_FIELD] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_CLONE_BLOCK')
	DROP PROCEDURE [SP_CLONE_BLOCK]
GO
CREATE PROCEDURE [SP_CLONE_BLOCK] @GA_ID DECIMAL (12,0), @NEW_GA_ID DECIMAL (12,0) OUTPUT
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRANSACTION
	BEGIN TRY

		--
		-- Create temporary tables (Just copy tables structure)
		--

		SELECT * INTO #GROUP_PARTNER_INTERESTS
			FROM GROUP_PARTNER_INTERESTS WHERE 42=10;

		SELECT * INTO #CONTRACT_HEADER
			FROM CONTRACT_HEADER WHERE 42=10;

		SELECT * INTO #BLOCK_HEADER
			FROM BLOCK_HEADER WHERE 42=10;

		SELECT * INTO #CONTRACT_ADDITIONAL
			FROM CONTRACT_ADDITIONAL WHERE 42=10;

		SELECT * INTO #BLOCK_ADDITIONAL
			FROM BLOCK_ADDITIONAL WHERE 42=10;

		SELECT * INTO #FIELD_CONTRACTS_BLOCKS
			FROM FIELD_CONTRACTS_BLOCKS WHERE 42=10;

		--
		-- Declare id variables
		--

		DECLARE @PAR_ID DECIMAL(12,0)

		DECLARE @EPC_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @PAR_ID = PAR_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID;

		SELECT @EPC_ID = EPC_ID FROM BLOCK_HEADER WHERE GA_ID = @GA_ID

		--
		-- 'Backup' specifyed object to temporaties
		--

		INSERT INTO #GROUP_PARTNER_INTERESTS
			SELECT * FROM GROUP_PARTNER_INTERESTS
			WHERE PAR_ID = @PAR_ID;

		INSERT INTO #CONTRACT_HEADER
			SELECT * FROM CONTRACT_HEADER
			WHERE EPC_ID = @EPC_ID;

		INSERT INTO #BLOCK_HEADER
			SELECT * FROM BLOCK_HEADER
			WHERE GA_ID = @GA_ID;

		INSERT INTO #CONTRACT_ADDITIONAL
			SELECT * FROM CONTRACT_ADDITIONAL
			WHERE EPC_ID = @EPC_ID;

		INSERT INTO #BLOCK_ADDITIONAL
			SELECT * FROM BLOCK_ADDITIONAL
			WHERE GA_ID = @GA_ID;

		INSERT INTO #FIELD_CONTRACTS_BLOCKS
			SELECT * FROM FIELD_CONTRACTS_BLOCKS
			WHERE GA_ID = @GA_ID;

		DECLARE @NAME VARCHAR(50)
		SELECT @NAME = 'Copy of ' + BLOCK_NAME FROM #BLOCK_HEADER WHERE GA_ID = @GA_ID;
		
		DECLARE @N INT;
		SET @N = 1;
		
		WHILE EXISTS (SELECT BLOCK_NAME FROM BLOCK_HEADER WHERE BLOCK_NAME = @NAME)
		BEGIN
			SELECT @NAME = 'Copy of ' + BLOCK_NAME + ' (' + CONVERT(VARCHAR(2), @N) + ')'
				FROM #BLOCK_HEADER WHERE GA_ID = @GA_ID;
		
			SET @N = @N + 1;
		END

		UPDATE #BLOCK_HEADER SET BLOCK_NAME = @NAME WHERE GA_ID = @GA_ID;

		--
		-- Get new IDs
		--

		DECLARE @NEW_PAR_ID DECIMAL (12, 0);

		DECLARE @NEW_EPC_ID DECIMAL (12, 0);

		EXEC sp_GenerateNumericIdentity @NEW_PAR_ID OUTPUT, 'GROUP_PARTNER_INTERESTS', 'PAR_ID';

		EXEC sp_GenerateNumericIdentity @NEW_EPC_ID OUTPUT, 'CONTRACT_HEADER', 'EPC_ID';

		EXEC sp_GenerateNumericIdentity @NEW_GA_ID OUTPUT, 'BLOCK_HEADER', 'GA_ID';

		--
		-- Update IDs
		--

		UPDATE #GROUP_PARTNER_INTERESTS SET PAR_ID = @NEW_PAR_ID WHERE PAR_ID = @PAR_ID;

		UPDATE #CONTRACT_HEADER SET EPC_ID = @NEW_EPC_ID WHERE EPC_ID = @EPC_ID;

		UPDATE #BLOCK_HEADER SET GA_ID = @NEW_GA_ID WHERE GA_ID = @GA_ID;

		UPDATE #CONTRACT_ADDITIONAL SET EPC_ID = @NEW_EPC_ID WHERE EPC_ID = @EPC_ID;

		UPDATE #BLOCK_ADDITIONAL SET GA_ID = @NEW_GA_ID WHERE GA_ID = @GA_ID;

		UPDATE #FIELD_CONTRACTS_BLOCKS SET GA_ID = @NEW_GA_ID WHERE GA_ID = @GA_ID;

		UPDATE #BLOCK_HEADER SET EPC_ID = @NEW_EPC_ID WHERE EPC_ID = @EPC_ID;

		UPDATE #FIELD_CONTRACTS_BLOCKS SET GA_ID = @NEW_GA_ID WHERE EPC_ID = @EPC_ID;

		--
		-- 'Restore' copy
		--

		INSERT INTO GROUP_PARTNER_INTERESTS
			SELECT * FROM #GROUP_PARTNER_INTERESTS
			WHERE PAR_ID = @NEW_PAR_ID;

		INSERT INTO CONTRACT_HEADER
			SELECT * FROM #CONTRACT_HEADER
			WHERE EPC_ID = @NEW_EPC_ID;

		INSERT INTO BLOCK_HEADER
			SELECT * FROM #BLOCK_HEADER
			WHERE GA_ID = @NEW_GA_ID;

		INSERT INTO CONTRACT_ADDITIONAL
			SELECT * FROM #CONTRACT_ADDITIONAL
			WHERE EPC_ID = @NEW_EPC_ID;

		INSERT INTO BLOCK_ADDITIONAL
			SELECT * FROM #BLOCK_ADDITIONAL
			WHERE GA_ID = @NEW_GA_ID;

		INSERT INTO FIELD_CONTRACTS_BLOCKS
			SELECT * FROM #FIELD_CONTRACTS_BLOCKS
			WHERE GA_ID = @NEW_GA_ID;

		--
		-- Drop temporaries
		--

		DROP TABLE #GROUP_PARTNER_INTERESTS;

		DROP TABLE #CONTRACT_HEADER;

		DROP TABLE #BLOCK_HEADER;

		DROP TABLE #CONTRACT_ADDITIONAL;

		DROP TABLE #BLOCK_ADDITIONAL;

		DROP TABLE #FIELD_CONTRACTS_BLOCKS;

		--
		-- Update tag
		--

		UPDATE BLOCK_ADDITIONAL SET CREATED_BY='USER' WHERE GA_ID = @GA_ID;

	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		RETURN 1
	END CATCH

	COMMIT TRANSACTION
END
GO


GRANT EXEC ON [SP_CLONE_BLOCK] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_CLONE_COMPLEX')
	DROP PROCEDURE [SP_CLONE_COMPLEX]
GO
CREATE PROCEDURE [SP_CLONE_COMPLEX] @FIELD_COMPLEX_ID DECIMAL (12,0), @NEW_FIELD_COMPLEX_ID DECIMAL (12,0) OUTPUT
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRANSACTION
	BEGIN TRY

		--
		-- Create temporary tables (Just copy tables structure)
		--

		SELECT * INTO #INV_ASS
			FROM INV_ASS WHERE 42=10;

		SELECT * INTO #FIELD_COMPLEX
			FROM FIELD_COMPLEX WHERE 42=10;

		SELECT * INTO #INV_ASS_DATA
			FROM INV_ASS_DATA WHERE 42=10;

		SELECT * INTO #INV_ASS_TUPLE_DATA
			FROM INV_ASS_TUPLE_DATA WHERE 42=10;

		--
		-- Declare id variables
		--

		DECLARE @INV_ASS_ID DECIMAL(12,0)

		--
		-- Set id variables
		--

		SELECT @INV_ASS_ID = INV_ASS_ID FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID

		--
		-- 'Backup' specifyed object to temporaties
		--

		INSERT INTO #INV_ASS
			SELECT * FROM INV_ASS
			WHERE INV_ASS_ID = @INV_ASS_ID;

		INSERT INTO #FIELD_COMPLEX
			SELECT * FROM FIELD_COMPLEX
			WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		INSERT INTO #INV_ASS_DATA
			SELECT * FROM INV_ASS_DATA
			WHERE INV_ASS_ID = @INV_ASS_ID;

		INSERT INTO #INV_ASS_TUPLE_DATA
			SELECT * FROM INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @INV_ASS_ID;

		DECLARE @NAME VARCHAR(50)
		SELECT @NAME = 'Copy of ' + FIELD_COMPLEX_NAME FROM #FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;
		
		DECLARE @N INT;
		SET @N = 1;
		
		WHILE EXISTS (SELECT FIELD_COMPLEX_NAME FROM FIELD_COMPLEX WHERE FIELD_COMPLEX_NAME = @NAME)
		BEGIN
			SELECT @NAME = 'Copy of ' + FIELD_COMPLEX_NAME + ' (' + CONVERT(VARCHAR(2), @N) + ')'
				FROM #FIELD_COMPLEX WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;
		
			SET @N = @N + 1;
		END

		UPDATE #FIELD_COMPLEX SET FIELD_COMPLEX_NAME = @NAME WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		--
		-- Get new IDs
		--

		DECLARE @NEW_INV_ASS_ID DECIMAL (12, 0);

		EXEC sp_GenerateNumericIdentity @NEW_INV_ASS_ID OUTPUT, 'INV_ASS', 'INV_ASS_ID';

		EXEC sp_GenerateNumericIdentity @NEW_FIELD_COMPLEX_ID OUTPUT, 'FIELD_COMPLEX', 'FIELD_COMPLEX_ID';

		--
		-- Update IDs
		--

		UPDATE #INV_ASS SET INV_ASS_ID = @NEW_INV_ASS_ID WHERE INV_ASS_ID = @INV_ASS_ID;

		UPDATE #FIELD_COMPLEX SET FIELD_COMPLEX_ID = @NEW_FIELD_COMPLEX_ID WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

		UPDATE #INV_ASS_DATA SET INV_ASS_ID = @NEW_INV_ASS_ID WHERE INV_ASS_ID = @INV_ASS_ID;

		UPDATE #INV_ASS_TUPLE_DATA SET INV_ASS_ID = @NEW_INV_ASS_ID WHERE INV_ASS_ID = @INV_ASS_ID;

		--
		-- 'Restore' copy
		--

		INSERT INTO INV_ASS
			SELECT * FROM #INV_ASS
			WHERE INV_ASS_ID = @NEW_INV_ASS_ID;

		INSERT INTO FIELD_COMPLEX
			SELECT * FROM #FIELD_COMPLEX
			WHERE FIELD_COMPLEX_ID = @NEW_FIELD_COMPLEX_ID;

		INSERT INTO INV_ASS_DATA
			SELECT * FROM #INV_ASS_DATA
			WHERE INV_ASS_ID = @NEW_INV_ASS_ID;

		INSERT INTO INV_ASS_TUPLE_DATA
			SELECT * FROM #INV_ASS_TUPLE_DATA
			WHERE INV_ASS_ID = @NEW_INV_ASS_ID;

		--
		-- Drop temporaries
		--

		DROP TABLE #INV_ASS;

		DROP TABLE #FIELD_COMPLEX;

		DROP TABLE #INV_ASS_DATA;

		DROP TABLE #INV_ASS_TUPLE_DATA;

		--
		-- Update tag
		--

		UPDATE FIELD_COMPLEX SET CREATED_BY='USER' WHERE FIELD_COMPLEX_ID = @FIELD_COMPLEX_ID;

	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		RETURN 1
	END CATCH

	COMMIT TRANSACTION
END
GO


GRANT EXEC ON [SP_CLONE_COMPLEX] TO [abu]
GO


IF EXISTS (SELECT name FROM sys.objects WHERE type='P' AND name='SP_CLONE_GLOBALS')
	DROP PROCEDURE [SP_CLONE_GLOBALS]
GO
CREATE PROCEDURE [SP_CLONE_GLOBALS] @GLOBAL_ASSUMPTIONS_ID DECIMAL (12,0), @NEW_GLOBAL_ASSUMPTIONS_ID DECIMAL (12,0) OUTPUT
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRANSACTION
	BEGIN TRY

		--
		-- Create temporary tables (Just copy tables structure)
		--

		SELECT * INTO #GLOBAL_ASSUMPTIONS
			FROM GLOBAL_ASSUMPTIONS WHERE 42=10;

		SELECT * INTO #GAS_PRICE
			FROM GAS_PRICE WHERE 42=10;

		SELECT * INTO #INFLATION
			FROM INFLATION WHERE 42=10;

		SELECT * INTO #LIQUID_PRICE
			FROM LIQUID_PRICE WHERE 42=10;

		SELECT * INTO #GAS_PRICE_DATA
			FROM GAS_PRICE_DATA WHERE 42=10;

		SELECT * INTO #INFLATION_DATA
			FROM INFLATION_DATA WHERE 42=10;

		SELECT * INTO #LIQUID_PRICE_DATA
			FROM LIQUID_PRICE_DATA WHERE 42=10;

		--
		-- Declare id variables
		--

		--
		-- Set id variables
		--



		--
		-- 'Backup' specifyed object to temporaties
		--

		INSERT INTO #GLOBAL_ASSUMPTIONS
			SELECT * FROM GLOBAL_ASSUMPTIONS
			WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		INSERT INTO #GAS_PRICE
			SELECT * FROM GAS_PRICE
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO #INFLATION
			SELECT * FROM INFLATION
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO #LIQUID_PRICE
			SELECT * FROM LIQUID_PRICE
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO #GAS_PRICE_DATA
			SELECT * FROM GAS_PRICE_DATA
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO #INFLATION_DATA
			SELECT * FROM INFLATION_DATA
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO #LIQUID_PRICE_DATA
			SELECT * FROM LIQUID_PRICE_DATA
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID);

		DECLARE @NAME VARCHAR(50)
		SELECT @NAME = 'Copy of ' + GLOBALS_NAME FROM #GLOBAL_ASSUMPTIONS WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;
		
		DECLARE @N INT;
		SET @N = 1;
		
		WHILE EXISTS (SELECT GLOBALS_NAME FROM GLOBAL_ASSUMPTIONS WHERE GLOBALS_NAME = @NAME)
		BEGIN
			SELECT @NAME = 'Copy of ' + GLOBALS_NAME + ' (' + CONVERT(VARCHAR(2), @N) + ')'
				FROM #GLOBAL_ASSUMPTIONS WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;
		
			SET @N = @N + 1;
		END

		UPDATE #GLOBAL_ASSUMPTIONS SET GLOBALS_NAME = @NAME WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		--
		-- Get new IDs
		--

		EXEC sp_GenerateNumericIdentity @NEW_GLOBAL_ASSUMPTIONS_ID OUTPUT, 'GLOBAL_ASSUMPTIONS', 'GLOBAL_ASSUMPTIONS_ID';

		--
		-- Update IDs
		--

		UPDATE #GLOBAL_ASSUMPTIONS SET GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

		DECLARE @NEW_GAS_PRICE_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT GAS_PRICE_ID
			FROM #GAS_PRICE
			WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID;

		OPEN CURS;

		DECLARE @GAS_PRICE_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @GAS_PRICE_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_GAS_PRICE_ID OUTPUT, 'GAS_PRICE', 'GAS_PRICE_ID';

			UPDATE #GAS_PRICE
				SET GAS_PRICE_ID = @NEW_GAS_PRICE_ID
				WHERE GAS_PRICE_ID = @GAS_PRICE_ID;

			UPDATE #GAS_PRICE SET GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID WHERE GAS_PRICE_ID = @GAS_PRICE_ID;
			UPDATE #GAS_PRICE_DATA SET GAS_PRICE_ID = @NEW_GAS_PRICE_ID WHERE GAS_PRICE_ID = @GAS_PRICE_ID;

			FETCH NEXT FROM CURS INTO @GAS_PRICE_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_INFLATION_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT INFLATION_ID
			FROM #INFLATION
			WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID;

		OPEN CURS;

		DECLARE @INFLATION_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @INFLATION_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_INFLATION_ID OUTPUT, 'INFLATION', 'INFLATION_ID';

			UPDATE #INFLATION
				SET INFLATION_ID = @NEW_INFLATION_ID
				WHERE INFLATION_ID = @INFLATION_ID;

			UPDATE #INFLATION SET GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID WHERE INFLATION_ID = @INFLATION_ID;
			UPDATE #INFLATION_DATA SET INFLATION_ID = @NEW_INFLATION_ID WHERE INFLATION_ID = @INFLATION_ID;

			FETCH NEXT FROM CURS INTO @INFLATION_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		DECLARE @NEW_LIQUID_PRICE_ID DECIMAL(12, 0);

		DECLARE CURS CURSOR
		FOR SELECT DISTINCT LIQUID_PRICE_ID
			FROM #LIQUID_PRICE
			WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID;

		OPEN CURS;

		DECLARE @LIQUID_PRICE_ID DECIMAL(12, 0);

		FETCH NEXT FROM CURS INTO @LIQUID_PRICE_ID;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC sp_GenerateNumericIdentity @NEW_LIQUID_PRICE_ID OUTPUT, 'LIQUID_PRICE', 'LIQUID_PRICE_ID';

			UPDATE #LIQUID_PRICE
				SET LIQUID_PRICE_ID = @NEW_LIQUID_PRICE_ID
				WHERE LIQUID_PRICE_ID = @LIQUID_PRICE_ID;

			UPDATE #LIQUID_PRICE SET GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID WHERE LIQUID_PRICE_ID = @LIQUID_PRICE_ID;
			UPDATE #LIQUID_PRICE_DATA SET LIQUID_PRICE_ID = @NEW_LIQUID_PRICE_ID WHERE LIQUID_PRICE_ID = @LIQUID_PRICE_ID;

			FETCH NEXT FROM CURS INTO @LIQUID_PRICE_ID;
		END

		CLOSE CURS;
		DEALLOCATE CURS;


		--
		-- 'Restore' copy
		--

		INSERT INTO GLOBAL_ASSUMPTIONS
			SELECT * FROM #GLOBAL_ASSUMPTIONS
			WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID;

		INSERT INTO GAS_PRICE
			SELECT * FROM #GAS_PRICE
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO INFLATION
			SELECT * FROM #INFLATION
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO LIQUID_PRICE
			SELECT * FROM #LIQUID_PRICE
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO GAS_PRICE_DATA
			SELECT * FROM #GAS_PRICE_DATA
			WHERE GAS_PRICE_ID IN (SELECT GAS_PRICE_ID FROM GAS_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO INFLATION_DATA
			SELECT * FROM #INFLATION_DATA
			WHERE INFLATION_ID IN (SELECT INFLATION_ID FROM INFLATION WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID);

		INSERT INTO LIQUID_PRICE_DATA
			SELECT * FROM #LIQUID_PRICE_DATA
			WHERE LIQUID_PRICE_ID IN (SELECT LIQUID_PRICE_ID FROM LIQUID_PRICE WHERE GLOBAL_ASSUMPTIONS_ID = @NEW_GLOBAL_ASSUMPTIONS_ID);

		--
		-- Drop temporaries
		--

		DROP TABLE #GLOBAL_ASSUMPTIONS;

		DROP TABLE #GAS_PRICE;

		DROP TABLE #INFLATION;

		DROP TABLE #LIQUID_PRICE;

		DROP TABLE #GAS_PRICE_DATA;

		DROP TABLE #INFLATION_DATA;

		DROP TABLE #LIQUID_PRICE_DATA;

		--
		-- Update tag
		--

		UPDATE GLOBAL_ASSUMPTIONS SET CREATED_BY='USER' WHERE GLOBAL_ASSUMPTIONS_ID = @GLOBAL_ASSUMPTIONS_ID;

	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION
		RETURN 1
	END CATCH

	COMMIT TRANSACTION
END
GO


GRANT EXEC ON [SP_CLONE_GLOBALS] TO [abu]
GO