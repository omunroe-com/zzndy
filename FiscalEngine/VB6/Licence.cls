VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsLicence"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

Private Declare Function LicenceObtain Lib "MaiLib32.dll" (ByVal sProductId As String, ByRef hlic As Long) As Long
Private Declare Function LicenceValid Lib "MaiLib32.dll" (ByVal hlic As Long) As Long
Private Declare Function LicenceRelease Lib "MaiLib32.dll" (ByVal hlic As Long) As Long
Private Declare Sub LicenceNum Lib "MaiLib32.dll" (ByVal hlic As Long, ByVal sLicNumBuf As String)
Private Declare Sub LicenceInfo Lib "MaiLib32.dll" (ByVal hlic As Long, ByVal sLicInfoBuf As String)
Private Declare Sub Verbosity Lib "MaiLib32.dll" (ByVal lLevel As Long)

Private m_hlic As Long
Private m_sProductId As String
Private m_sLicNum As String
Private m_sLicInfo As String

Public Enum eVerbosity
    verbOff = 0         ' no messages
    verbFailure = 1     ' only error messages
End Enum

Private mc_colErrors As New Collection

Private Const mc_sERROR_SOURCE As String = "Petroconsultants-MAI Licenser"

' Takes a 2 character string and checks for any free licences of that type
' sProductId is case sensitive
' Be prepared to catch any errors if a licence can't be found
Public Sub LicObtain(ByVal sProductId As String)
    Dim lResult As Long
    
    #If NODONG = 1 Then
        Exit Sub
    #End If
    lResult = LicenceObtain(sProductId, m_hlic)
    
    If lResult > 0 Then
        Err.Raise 42000 + lResult, mc_sERROR_SOURCE, mc_colErrors("E" & lResult) & "."
    Else
        m_sProductId = sProductId
    End If
End Sub

' Checks an already obtained licence to see whether it is still valid
' Make sure that LicObtain has been successfully called before calling LicValid
' Be prepared to catch any errors if a licence can't be found
Public Sub LicValid()
    Dim lResult As Long
    
    If m_hlic > 0 Then
        lResult = LicenceValid(m_hlic)
        
        If lResult > 0 Then
            Err.Raise 42000 + lResult, mc_sERROR_SOURCE, mc_colErrors("E" & lResult) & "."
        End If
    End If
End Sub

' Releases an obtained valid licence
' Make sure that LicObtain has been successfully called before calling LicRelease
' Be prepared to catch any errors
Public Sub LicRelease()
    Dim lResult As Long
    
    #If NODONG = 1 Then
        Exit Sub
    #End If
    If m_hlic > 0 Then
        lResult = LicenceRelease(m_hlic)
        
        If lResult > 0 Then
            Err.Raise 42000 + lResult, mc_sERROR_SOURCE, mc_colErrors("E" & lResult) & "."
        Else
            m_hlic = 0
        End If
    End If
End Sub

' Retrieves the licence number (possibly alpha-numeric)
Public Property Get LicNum() As String
    Dim sNum As String * 5
    Dim nLen As Integer
    
    LicNum = ""
    
    If m_hlic > 0 Then
        If Len(m_sLicNum) = 0 Then
            LicenceNum m_hlic, sNum
            
            nLen = InStr(sNum, Chr$(0)) - 1
            If nLen > 0 Then
                m_sLicNum = Trim$(Left$(sNum, nLen))
            End If
        End If
        
        LicNum = m_sLicNum
    End If
End Property

' Retrieves the licence info (usually company name of licence holder)
Public Property Get LicInfo() As String
    Dim sInfo As String * 53
    Dim nLen As Integer
    
    LicInfo = ""
    
    If m_hlic > 0 Then
        If Len(m_sLicInfo) = 0 Then
            LicenceInfo m_hlic, sInfo
            
            nLen = InStr(sInfo, Chr$(0)) - 1
            If nLen > 0 Then
                m_sLicInfo = Trim$(Left$(sInfo, nLen))
            End If
        End If
        
        LicInfo = m_sLicInfo
    End If
End Property

' Sets the level of error messages generated by MaiLib32 (see eVerbosity for options)
Public Sub SetVerbosity(ByVal verbLevel As eVerbosity)
    Verbosity verbLevel
End Sub

' Returns the licence handle of this licence
Public Property Get hlic() As Long
    hlic = m_hlic
End Property

' Returns the product id of this licence
Public Property Get ProductId() As String
    ProductId = m_sProductId
End Property

' Sets up all current error codes and descriptions
Private Sub SetErrors()
    mc_colErrors.Add "Driver initialisation failed", "E1"
    mc_colErrors.Add "No Valid Key Found", "E2"
    mc_colErrors.Add "Product is not licenced", "E3"
    mc_colErrors.Add "Unknown Product", "E4"
    mc_colErrors.Add "Unable to access security key", "E5"
    
    mc_colErrors.Add "Licence period expired", "E10"
    mc_colErrors.Add "System clock set before start of licence period", "E11"
    mc_colErrors.Add "System clock set before last run time", "E12"
    mc_colErrors.Add "Failed to write date to key", "E13"
    mc_colErrors.Add "Failed to write time to key", "E14"
    
    mc_colErrors.Add "Licence has become invalid", "E30"
    
    mc_colErrors.Add "Unable to release licence", "E40"
    
    mc_colErrors.Add "Unable to obtain access to licence system", "E50"
    mc_colErrors.Add "Maximum number of licences already granted", "E51"
    
    mc_colErrors.Add "Invalid licence handle", "E99"
End Sub

Private Sub Class_Initialize()
    m_hlic = 0
    SetErrors
End Sub

' Clean-up if necessary
Private Sub Class_Terminate()
    If m_hlic > 0 Then
        ' Try to release licence
        LicRelease
    End If
End Sub
