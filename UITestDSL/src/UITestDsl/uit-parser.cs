// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  EPUAKYIW0416
// DateTime: 6/25/2009 3:31:29 PM
// UserName: Andriy_Vynogradov
// Input file <uit.parser>

// options: no-lines

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

using UITestDsl;

public enum Tokens {
    error=1,EOF=2,CLICKACTION=3,TYPETOOLBAR=4,NEWFORMACTION=5,NAMEASSERT=6,
    VARDECL=7,SWITCHCTX=8,SELECTACTION=9,LISTRESOLUTION=10,CLOSEALIAS=11,STRING=12};

public partial class Parser: ShiftReduceParser<int, LexLocation>
{
#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

    protected override void Initialize()
  {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

    this.InitStateTable(15);
    AddState(0,new State(new int[]{3,4,8,8,9,11},new int[]{-1,1,-3,3,-4,7,-5,10}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(-2));
    AddState(4,new State(new int[]{4,5}));
    AddState(5,new State(new int[]{12,6}));
    AddState(6,new State(-5));
    AddState(7,new State(-3));
    AddState(8,new State(new int[]{12,9}));
    AddState(9,new State(-7));
    AddState(10,new State(-4));
    AddState(11,new State(new int[]{12,12}));
    AddState(12,new State(new int[]{10,13}));
    AddState(13,new State(new int[]{12,14}));
    AddState(14,new State(-6));

    Rule[] rules=new Rule[8];
    rules[1]=new Rule(-2, new int[]{-1,2});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-1, new int[]{-4});
    rules[4]=new Rule(-1, new int[]{-5});
    rules[5]=new Rule(-3, new int[]{3,4,12});
    rules[6]=new Rule(-5, new int[]{9,12,10,12});
    rules[7]=new Rule(-4, new int[]{8,12});
    this.InitRules(rules);

    this.InitNonTerminals(new string[] {"", "Expr", "$accept", "ClickAction", 
      "SwitchAction", "SelectAction", });
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 5: // ClickAction -> CLICKACTION, TYPETOOLBAR, STRING
{ Add<ClickAction>( ValueStack[ValueStack.Depth-1] ); }
        break;
      case 6: // SelectAction -> SELECTACTION, STRING, LISTRESOLUTION, STRING
{ Add<SelectAction>( ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] ); }
        break;
      case 7: // SwitchAction -> SWITCHCTX, STRING
{ Add<SwitchAction>( ValueStack[ValueStack.Depth-1] ); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
