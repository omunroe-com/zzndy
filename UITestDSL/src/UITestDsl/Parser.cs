// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  EPUAKYIW0416
// DateTime: 7/3/2009 11:47:33 AM
// UserName: Andriy_Vynogradov
// Input file <Grammar\uit.parser>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using UITestDsl.Actions;

namespace UITestDsl
{
public enum Tokens {
    error=1,EOF=2,CLICK=3,TOOLBAR=4,APPEARS=5,NAMED=6,
    DUBBED=7,SWITCH=8,SELECT=9,IN=10,CLOSE=11,TO=12,
    FORM=13,ACTION=14,RUN=15,WAIT=16,STRING=17,ID=18,
    PATH=19,NUM=20};

public partial struct ValueType
{
    public string identifier;
    public int number;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

  protected override void Initialize()
  {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

    this.InitStateTable(41);
    AddState(0,new State(new int[]{15,38,3,7,8,16,9,20,13,25,16,32,11,35},new int[]{-1,1,-3,3,-4,40,-5,37,-6,6,-7,15,-8,19,-9,24,-10,31,-11,34}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{3,7,8,16,9,20,13,25,16,32,11,35},new int[]{-4,4,-5,37,-6,6,-7,15,-8,19,-9,24,-10,31,-11,34}));
    AddState(4,new State(new int[]{3,7,8,16,9,20,13,25,16,32,11,35,2,-2},new int[]{-5,5,-6,6,-7,15,-8,19,-9,24,-10,31,-11,34}));
    AddState(5,new State(-5));
    AddState(6,new State(-7));
    AddState(7,new State(new int[]{4,10,11,14},new int[]{-12,8,-13,9,-14,13}));
    AddState(8,new State(-14));
    AddState(9,new State(-15));
    AddState(10,new State(new int[]{14,11}));
    AddState(11,new State(new int[]{17,12}));
    AddState(12,new State(-17));
    AddState(13,new State(-16));
    AddState(14,new State(-18));
    AddState(15,new State(-8));
    AddState(16,new State(new int[]{12,17}));
    AddState(17,new State(new int[]{18,18}));
    AddState(18,new State(-20));
    AddState(19,new State(-9));
    AddState(20,new State(new int[]{17,21}));
    AddState(21,new State(new int[]{10,22}));
    AddState(22,new State(new int[]{17,23}));
    AddState(23,new State(-19));
    AddState(24,new State(-10));
    AddState(25,new State(new int[]{5,26}));
    AddState(26,new State(new int[]{6,27}));
    AddState(27,new State(new int[]{17,28}));
    AddState(28,new State(new int[]{7,29}));
    AddState(29,new State(new int[]{18,30}));
    AddState(30,new State(-13));
    AddState(31,new State(-11));
    AddState(32,new State(new int[]{20,33}));
    AddState(33,new State(-21));
    AddState(34,new State(-12));
    AddState(35,new State(new int[]{18,36}));
    AddState(36,new State(-22));
    AddState(37,new State(-4));
    AddState(38,new State(new int[]{19,39}));
    AddState(39,new State(-6));
    AddState(40,new State(new int[]{3,7,8,16,9,20,13,25,16,32,11,35,2,-3},new int[]{-5,5,-6,6,-7,15,-8,19,-9,24,-10,31,-11,34}));

    Rule[] rules=new Rule[23];
    rules[1]=new Rule(-2, new int[]{-1,2});
    rules[2]=new Rule(-1, new int[]{-3,-4});
    rules[3]=new Rule(-1, new int[]{-4});
    rules[4]=new Rule(-4, new int[]{-5});
    rules[5]=new Rule(-4, new int[]{-4,-5});
    rules[6]=new Rule(-3, new int[]{15,19});
    rules[7]=new Rule(-5, new int[]{-6});
    rules[8]=new Rule(-5, new int[]{-7});
    rules[9]=new Rule(-5, new int[]{-8});
    rules[10]=new Rule(-5, new int[]{-9});
    rules[11]=new Rule(-5, new int[]{-10});
    rules[12]=new Rule(-5, new int[]{-11});
    rules[13]=new Rule(-9, new int[]{13,5,6,17,7,18});
    rules[14]=new Rule(-6, new int[]{3,-12});
    rules[15]=new Rule(-12, new int[]{-13});
    rules[16]=new Rule(-12, new int[]{-14});
    rules[17]=new Rule(-13, new int[]{4,14,17});
    rules[18]=new Rule(-14, new int[]{11});
    rules[19]=new Rule(-8, new int[]{9,17,10,17});
    rules[20]=new Rule(-7, new int[]{8,12,18});
    rules[21]=new Rule(-10, new int[]{16,20});
    rules[22]=new Rule(-11, new int[]{11,18});
    this.InitRules(rules);

    this.InitNonTerminals(new string[] {"", "File", "$accept", "RunExpr", "Rules", 
      "Expr", "ClickAction", "SwitchAction", "SelectAction", "NewFormExpectation", 
      "WaitAction", "CloseAction", "ClickTarget", "ToolbarButton", "Alias", });
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 6: // RunExpr -> RUN, PATH
{ RunApplication( ValueStack[ValueStack.Depth-1].identifier ); }
        break;
      case 13: // NewFormExpectation -> FORM, APPEARS, NAMED, STRING, DUBBED, ID
{ AddNewFormExpectation( ValueStack[ValueStack.Depth-3].identifier, ValueStack[ValueStack.Depth-1].identifier ); }
        break;
      case 17: // ToolbarButton -> TOOLBAR, ACTION, STRING
{ AddClickToolbarAction( ValueStack[ValueStack.Depth-1].identifier ); }
        break;
      case 18: // Alias -> CLOSE
{ AddClickSpecialAction( ESpecialAction.Close ); }
        break;
      case 19: // SelectAction -> SELECT, STRING, IN, STRING
{ AddSelectAction( ValueStack[ValueStack.Depth-3].identifier, ValueStack[ValueStack.Depth-1].identifier ); }
        break;
      case 20: // SwitchAction -> SWITCH, TO, ID
{ AddSwitchAction( ValueStack[ValueStack.Depth-1].identifier ); }
        break;
      case 21: // WaitAction -> WAIT, NUM
{ AddWaitAction( ValueStack[ValueStack.Depth-1].number ); }
        break;
      case 22: // CloseAction -> CLOSE, ID
{ AddCloseAction( ValueStack[ValueStack.Depth-1].identifier ); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
