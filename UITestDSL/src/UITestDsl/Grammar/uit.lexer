%namespace UITestDsl
%tokentype Tokens
%scanbasetype ErrorHandlingScanner

alpha   [[:IsLetter:]]|_
id      {alpha}({alpha}|[[:IsDigit:]])+

run     [Rr][Uu][Nn]
click   [Cc][Ll][Ii][Cc][Kk]
toolb   [Tt][Oo][Oo][Ll][Bb][Aa][Rr]
act     [Aa][Cc][Tt][Ii][Oo][Nn]
form    [Ff][Oo][Rr][Mm]
appears [Aa][Pp][Pp][Ee][Aa][Rr][Ss]
named   [Nn][Aa][Mm][Ee][Dd]
dubbed  [Dd][Uu][Bb][Bb][Ee][Dd]
switch  [Ss][Ww][Ii][Tt][Cc][Hh]
to      [Tt][Oo]
in      [Ii][Nn]
select  [Ss][Ee][Ll][Ee][Cc][Tt]
close   [Cc][Ll][Oo][Ss][Ee]
comm    #.+$
wait    [Ww][Aa][Ii][Tt]
num     [[:IsDigit:]]+

%%


{comm}              {}                    
{run}               { trace("run"); return (int)Tokens.RUN; }
{click}             { trace("click"); return (int)Tokens.CLICK; }
{toolb}             { trace("toolbar"); return (int)Tokens.TOOLBAR; }
{act}               { trace("action"); return (int)Tokens.ACTION; }
{form}              { trace("form"); return (int)Tokens.FORM; }
{appears}           { trace("appears"); return (int)Tokens.APPEARS; }
{named}             { trace("named"); return (int)Tokens.NAMED; }
{dubbed}            { trace("dubbed"); return (int)Tokens.DUBBED; }
{switch}            { trace("switch"); return (int)Tokens.SWITCH; }
{to}                { trace("to"); return (int)Tokens.TO; }
{select}            { trace("select"); return (int)Tokens.SELECT; }
{in}                { trace("in"); return (int)Tokens.IN; }
{close}             { trace("close"); return (int)Tokens.CLOSE; }
{wait}              { trace("wait"); return (int)Tokens.WAIT; }
{num}               { 
                        trace("number " + yytext);
                        yylval.number = Int32.Parse( yytext );
                        return (int)Tokens.NUM;
                    }

\${id}              { 
                        trace("id " + yytext); 
                        yylval.identifier = yytext.Substring( 1 ); 
                        return (int)Tokens.ID;
                    }
                    
\"[^\"]*\"          {
                        trace("string " + yytext); 
                        yylval.identifier = yytext.Trim( '"' );
                        return (int)Tokens.STRING; 
                    }
                    
(([C-Z]\:)|\\|\.\.?)[^\r\n]+   {
                        trace("path " + yytext);
                        yylval.identifier = yytext;
                        return (int)Tokens.PATH; 
                    }
                   

%%
